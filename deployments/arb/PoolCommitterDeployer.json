{
  "address": "0xC0343a458C5766a365E5De2EE2CAF271dE65e53b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_minimumCommitSize",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_maximumCommitQueueLength",
          "type": "uint128"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x69b6a8761e13d0311d4597636bc488dc451996ccb9926b3114b2f45ee82be451",
  "receipt": {
    "to": null,
    "from": "0xfb59B91646cd0890F3E5343384FEb746989B66C7",
    "contractAddress": "0xC0343a458C5766a365E5De2EE2CAF271dE65e53b",
    "transactionIndex": 0,
    "gasUsed": "192010071",
    "logsBloom": "0x
    "blockHash": "0xeaf9d301a07513c609e1e9cffb3d57ae268d646c6ef6372ae3a934b559e01865",
    "transactionHash": "0x69b6a8761e13d0311d4597636bc488dc451996ccb9926b3114b2f45ee82be451",
    "logs": [],
    "blockNumber": 3851109,
    "cumulativeGasUsed": "149466051",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6B2936bA3eb7258604d607354a55750eD474Ce32"
  ],
  "solcInputHash": "3efc6345f10ff4dee709674b30f177e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minimumCommitSize\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maximumCommitQueueLength\",\"type\":\"uint128\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The deployer of the PoolCommitter contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/implementation/PoolCommitterDeployer.sol\":\"PoolCommitterDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"abdk-libraries-solidity/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n  /*\\n   * 0.\\n   */\\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n  /*\\n   * -0.\\n   */\\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n  /*\\n   * +Infinity.\\n   */\\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n  /*\\n   * -Infinity.\\n   */\\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n  /*\\n   * Canonical NaN value.\\n   */\\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n  /**\\n   * Convert signed 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromInt (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 256-bit integer number\\n   * rounding towards zero.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 256-bit integer number\\n   */\\n  function toInt (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16638); // Overflow\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into quadruple precision number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return quadruple precision number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        uint256 result = x;\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into unsigned 256-bit integer number\\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n   * without error, because they are rounded to zero.\\n   *\\n   * @param x quadruple precision number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function toUInt (bytes16 x) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      if (exponent < 16383) return 0; // Underflow\\n\\n      require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\\n\\n      require (exponent <= 16638); // Overflow\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16495) result >>= 16495 - exponent;\\n      else if (exponent > 16495) result <<= exponent - 16495;\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 128.128 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from128x128 (int256 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint256 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 128.128 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 128.128 bit fixed point number\\n   */\\n  function to128x128 (bytes16 x) internal pure returns (int256) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16510); // Overflow\\n      if (exponent < 16255) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16367) result >>= 16367 - exponent;\\n      else if (exponent > 16367) result <<= exponent - 16367;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (result); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (result);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 bit fixed point number into quadruple precision\\n   * number.\\n   *\\n   * @param x signed 64.64 bit fixed point number\\n   * @return quadruple precision number\\n   */\\n  function from64x64 (int128 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (x == 0) return bytes16 (0);\\n      else {\\n        // We rely on overflow behavior here\\n        uint256 result = uint128 (x > 0 ? x : -x);\\n\\n        uint256 msb = mostSignificantBit (result);\\n        if (msb < 112) result <<= 112 - msb;\\n        else if (msb > 112) result >>= msb - 112;\\n\\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\n        if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n        return bytes16 (uint128 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into signed 64.64 bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x quadruple precision number\\n   * @return signed 64.64 bit fixed point number\\n   */\\n  function to64x64 (bytes16 x) internal pure returns (int128) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      require (exponent <= 16446); // Overflow\\n      if (exponent < 16319) return 0; // Underflow\\n\\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\\n        0x10000000000000000000000000000;\\n\\n      if (exponent < 16431) result >>= 16431 - exponent;\\n      else if (exponent > 16431) result <<= exponent - 16431;\\n\\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\\n        require (result <= 0x80000000000000000000000000000000);\\n        return -int128 (int256 (result)); // We rely on overflow behavior here\\n      } else {\\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (int256 (result));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Convert octuple precision number into quadruple precision number.\\n   *\\n   * @param x octuple precision number\\n   * @return quadruple precision number\\n   */\\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n      uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\\n      uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFFF) {\\n        if (significand > 0) return NaN;\\n        else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      }\\n\\n      if (exponent > 278526)\\n        return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n      else if (exponent < 245649)\\n        return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n      else if (exponent < 245761) {\\n        significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 124;\\n        exponent -= 245760;\\n      }\\n\\n      uint128 result = uint128 (significand | exponent << 112);\\n      if (negative) result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into octuple precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return octuple precision number\\n   */\\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n\\n      uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 245649 + msb;\\n        }\\n      } else {\\n        result <<= 124;\\n        exponent += 245760;\\n      }\\n\\n      result |= exponent << 236;\\n      if (uint128 (x) >= 0x80000000000000000000000000000000)\\n        result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n      return bytes32 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert double precision number into quadruple precision number.\\n   *\\n   * @param x double precision number\\n   * @return quadruple precision number\\n   */\\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 exponent = uint64 (x) >> 52 & 0x7FF;\\n\\n      uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\\n      else if (exponent == 0) {\\n        if (result > 0) {\\n          uint256 msb = mostSignificantBit (result);\\n          result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          exponent = 15309 + msb;\\n        }\\n      } else {\\n        result <<= 60;\\n        exponent += 15360;\\n      }\\n\\n      result |= exponent << 112;\\n      if (x & 0x8000000000000000 > 0)\\n        result |= 0x80000000000000000000000000000000;\\n\\n      return bytes16 (uint128 (result));\\n    }\\n  }\\n\\n  /**\\n   * Convert quadruple precision number into double precision number.\\n   *\\n   * @param x quadruple precision number\\n   * @return double precision number\\n   */\\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\\n    unchecked {\\n      bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\\n\\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (exponent == 0x7FFF) {\\n        if (significand > 0) return 0x7FF8000000000000; // NaN\\n        else return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      }\\n\\n      if (exponent > 17406)\\n        return negative ?\\n            bytes8 (0xFFF0000000000000) : // -Infinity\\n            bytes8 (0x7FF0000000000000); // Infinity\\n      else if (exponent < 15309)\\n        return negative ?\\n            bytes8 (0x8000000000000000) : // -0\\n            bytes8 (0x0000000000000000); // 0\\n      else if (exponent < 15361) {\\n        significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\n        exponent = 0;\\n      } else {\\n        significand >>= 60;\\n        exponent -= 15360;\\n      }\\n\\n      uint64 result = uint64 (significand | exponent << 52);\\n      if (negative) result |= 0x8000000000000000;\\n\\n      return bytes8 (result);\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is NaN, false otherwise\\n   */\\n  function isNaN (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Test whether given quadruple precision number is positive or negative\\n   * infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @return true if x is positive or negative infinity, false otherwise\\n   */\\n  function isInfinity (bytes16 x) internal pure returns (bool) {\\n    unchecked {\\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n        0x7FFF0000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \\n   *\\n   * @param x quadruple precision number\\n   * @return sign of x\\n   */\\n  function sign (bytes16 x) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      if (absoluteX == 0) return 0;\\n      else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\\n      else return 1;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n   * arguments are infinities of the same sign. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return sign (x - y)\\n   */\\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\\n    unchecked {\\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n      // Not infinities of the same sign\\n      require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n      if (x == y) return 0;\\n      else {\\n        bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\\n        bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\\n\\n        if (negativeX) {\\n          if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\\n          else return -1; \\n        } else {\\n          if (negativeY) return 1;\\n          else return absoluteX > absoluteY ? int8 (1) : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n   * anything. \\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return true if x equals to y, false otherwise\\n   */\\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\\n    unchecked {\\n      if (x == y) {\\n        return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n          0x7FFF0000000000000000000000000000;\\n      } else return false;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Special values behave in the following way:\\n   *\\n   * NaN + x = NaN for any x.\\n   * Infinity + x = Infinity for any finite x.\\n   * -Infinity + x = -Infinity for any finite x.\\n   * Infinity + Infinity = Infinity.\\n   * -Infinity + -Infinity = -Infinity.\\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) { \\n          if (x == y) return x;\\n          else return NaN;\\n        } else return x; \\n      } else if (yExponent == 0x7FFF) return y;\\n      else {\\n        bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n        else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n        else {\\n          int256 delta = int256 (xExponent) - int256 (yExponent);\\n  \\n          if (xSign == ySign) {\\n            if (delta > 112) return x;\\n            else if (delta > 0) ySignifier >>= uint256 (delta);\\n            else if (delta < -112) return y;\\n            else if (delta < 0) {\\n              xSignifier >>= uint256 (-delta);\\n              xExponent = yExponent;\\n            }\\n  \\n            xSignifier += ySignifier;\\n  \\n            if (xSignifier >= 0x20000000000000000000000000000) {\\n              xSignifier >>= 1;\\n              xExponent += 1;\\n            }\\n  \\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else {\\n              if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n              else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  \\n              return bytes16 (uint128 (\\n                  (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                  (xExponent << 112) |\\n                  xSignifier)); \\n            }\\n          } else {\\n            if (delta > 0) {\\n              xSignifier <<= 1;\\n              xExponent -= 1;\\n            } else if (delta < 0) {\\n              ySignifier <<= 1;\\n              xExponent = yExponent - 1;\\n            }\\n\\n            if (delta > 112) ySignifier = 1;\\n            else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\\n            else if (delta < -112) xSignifier = 1;\\n            else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\\n\\n            if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n            else {\\n              xSignifier = ySignifier - xSignifier;\\n              xSign = ySign;\\n            }\\n\\n            if (xSignifier == 0)\\n              return POSITIVE_ZERO;\\n\\n            uint256 msb = mostSignificantBit (xSignifier);\\n\\n            if (msb == 113) {\\n              xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n              xExponent += 1;\\n            } else if (msb < 112) {\\n              uint256 shift = 112 - msb;\\n              if (xExponent > shift) {\\n                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                xExponent -= shift;\\n              } else {\\n                xSignifier <<= xExponent - 1;\\n                xExponent = 0;\\n              }\\n            } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF)\\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else return bytes16 (uint128 (\\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\\n                (xExponent << 112) |\\n                xSignifier));\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Special values behave in the following way:\\n   *\\n   * NaN - x = NaN for any x.\\n   * Infinity - x = Infinity for any finite x.\\n   * -Infinity - x = -Infinity for any finite x.\\n   * Infinity - -Infinity = Infinity.\\n   * -Infinity - Infinity = -Infinity.\\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      return add (x, y ^ 0x80000000000000000000000000000000);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y.  Special values behave in the following way:\\n   *\\n   * NaN * x = NaN for any x.\\n   * Infinity * x = Infinity for any finite positive x.\\n   * Infinity * x = -Infinity for any finite negative x.\\n   * -Infinity * x = -Infinity for any finite positive x.\\n   * -Infinity * x = Infinity for any finite negative x.\\n   * Infinity * 0 = NaN.\\n   * -Infinity * 0 = NaN.\\n   * Infinity * Infinity = Infinity.\\n   * Infinity * -Infinity = -Infinity.\\n   * -Infinity * Infinity = -Infinity.\\n   * -Infinity * -Infinity = Infinity.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) {\\n          if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\n          else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n          else return NaN;\\n        } else {\\n          if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return x ^ y & 0x80000000000000000000000000000000;\\n        }\\n      } else if (yExponent == 0x7FFF) {\\n          if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n          else return y ^ x & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        xSignifier *= ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        xExponent += yExponent;\\n\\n        uint256 msb =\\n          xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\\n          xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\\n          mostSignificantBit (xSignifier);\\n\\n        if (xExponent + msb < 16496) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb < 16608) { // Subnormal\\n          if (xExponent < 16496)\\n            xSignifier >>= 16496 - xExponent;\\n          else if (xExponent > 16496)\\n            xSignifier <<= xExponent - 16496;\\n          xExponent = 0;\\n        } else if (xExponent + msb > 49373) {\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else {\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n          else if (msb < 112)\\n            xSignifier <<= 112 - msb;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb - 16607;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y.  Special values behave in the following way:\\n   *\\n   * NaN / x = NaN for any x.\\n   * x / NaN = NaN for any x.\\n   * Infinity / x = Infinity for any finite non-negative x.\\n   * Infinity / x = -Infinity for any finite negative x including -0.\\n   * -Infinity / x = -Infinity for any finite non-negative x.\\n   * -Infinity / x = Infinity for any finite negative x including -0.\\n   * x / Infinity = 0 for any finite non-negative x.\\n   * x / -Infinity = -0 for any finite non-negative x.\\n   * x / Infinity = -0 for any finite non-negative x including -0.\\n   * x / -Infinity = 0 for any finite non-negative x including -0.\\n   * \\n   * Infinity / Infinity = NaN.\\n   * Infinity / -Infinity = -NaN.\\n   * -Infinity / Infinity = -NaN.\\n   * -Infinity / -Infinity = NaN.\\n   *\\n   * Division by zero behaves in the following way:\\n   *\\n   * x / 0 = Infinity for any finite positive x.\\n   * x / -0 = -Infinity for any finite positive x.\\n   * x / 0 = -Infinity for any finite negative x.\\n   * x / -0 = Infinity for any finite negative x.\\n   * 0 / 0 = NaN.\\n   * 0 / -0 = NaN.\\n   * -0 / 0 = NaN.\\n   * -0 / -0 = NaN.\\n   *\\n   * @param x quadruple precision number\\n   * @param y quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n    unchecked {\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\\n\\n      if (xExponent == 0x7FFF) {\\n        if (yExponent == 0x7FFF) return NaN;\\n        else return x ^ y & 0x80000000000000000000000000000000;\\n      } else if (yExponent == 0x7FFF) {\\n        if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n        else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n        else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\n      } else {\\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (yExponent == 0) yExponent = 1;\\n        else ySignifier |= 0x10000000000000000000000000000;\\n\\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xExponent == 0) {\\n          if (xSignifier != 0) {\\n            uint shift = 226 - mostSignificantBit (xSignifier);\\n\\n            xSignifier <<= shift;\\n\\n            xExponent = 1;\\n            yExponent += shift - 114;\\n          }\\n        }\\n        else {\\n          xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n        }\\n\\n        xSignifier = xSignifier / ySignifier;\\n        if (xSignifier == 0)\\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\\n              NEGATIVE_ZERO : POSITIVE_ZERO;\\n\\n        assert (xSignifier >= 0x1000000000000000000000000000);\\n\\n        uint256 msb =\\n          xSignifier >= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :\\n          xSignifier >= 0x40000000000000000000000000000 ? 114 :\\n          xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\n\\n        if (xExponent + msb > yExponent + 16497) { // Overflow\\n          xExponent = 0x7FFF;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16380  < yExponent) { // Underflow\\n          xExponent = 0;\\n          xSignifier = 0;\\n        } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\\n          if (xExponent + 16380 > yExponent)\\n            xSignifier <<= xExponent + 16380 - yExponent;\\n          else if (xExponent + 16380 < yExponent)\\n            xSignifier >>= yExponent - xExponent - 16380;\\n\\n          xExponent = 0;\\n        } else { // Normal\\n          if (msb > 112)\\n            xSignifier >>= msb - 112;\\n\\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n          xExponent = xExponent + msb + 16269 - yExponent;\\n        }\\n\\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\\n            xExponent << 112 | xSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function neg (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x ^ 0x80000000000000000000000000000000;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function abs (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n  }\\n\\n  /**\\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n          bool oddExponent = xExponent & 0x1 == 0;\\n          xExponent = xExponent + 16383 >> 1;\\n\\n          if (oddExponent) {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 113;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (226 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          } else {\\n            if (xSignifier >= 0x10000000000000000000000000000)\\n              xSignifier <<= 112;\\n            else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              uint256 shift = (225 - msb) & 0xFE;\\n              xSignifier <<= shift;\\n              xExponent -= shift - 112 >> 1;\\n            }\\n          }\\n\\n          uint256 r = 0x10000000000000000000000000000;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1;\\n          r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n          uint256 r1 = xSignifier / r;\\n          if (r1 < r) r = r1;\\n\\n          return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\\n      else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \\n      else {\\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n        if (xExponent == 0x7FFF) return x;\\n        else {\\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          if (xExponent == 0) xExponent = 1;\\n          else xSignifier |= 0x10000000000000000000000000000;\\n\\n          if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n          bool resultNegative;\\n          uint256 resultExponent = 16495;\\n          uint256 resultSignifier;\\n\\n          if (xExponent >= 0x3FFF) {\\n            resultNegative = false;\\n            resultSignifier = xExponent - 0x3FFF;\\n            xSignifier <<= 15;\\n          } else {\\n            resultNegative = true;\\n            if (xSignifier >= 0x10000000000000000000000000000) {\\n              resultSignifier = 0x3FFE - xExponent;\\n              xSignifier <<= 15;\\n            } else {\\n              uint256 msb = mostSignificantBit (xSignifier);\\n              resultSignifier = 16493 - msb;\\n              xSignifier <<= 127 - msb;\\n            }\\n          }\\n\\n          if (xSignifier == 0x80000000000000000000000000000000) {\\n            if (resultNegative) resultSignifier += 1;\\n            uint256 shift = 112 - mostSignificantBit (resultSignifier);\\n            resultSignifier <<= shift;\\n            resultExponent -= shift;\\n          } else {\\n            uint256 bb = resultNegative ? 1 : 0;\\n            while (resultSignifier < 0x10000000000000000000000000000) {\\n              resultSignifier <<= 1;\\n              resultExponent -= 1;\\n  \\n              xSignifier *= xSignifier;\\n              uint256 b = xSignifier >> 255;\\n              resultSignifier += b ^ bb;\\n              xSignifier >>= 127 + b;\\n            }\\n          }\\n\\n          return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\\n              resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function ln (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n    }\\n  }\\n\\n  /**\\n   * Calculate 2^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n      if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n      else if (xExponent > 16397)\\n        return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n      else if (xExponent < 16255)\\n        return 0x3FFF0000000000000000000000000000;\\n      else {\\n        if (xExponent == 0) xExponent = 1;\\n        else xSignifier |= 0x10000000000000000000000000000;\\n\\n        if (xExponent > 16367)\\n          xSignifier <<= xExponent - 16367;\\n        else if (xExponent < 16367)\\n          xSignifier >>= 16367 - xExponent;\\n\\n        if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\\n          return POSITIVE_ZERO;\\n\\n        if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n          return POSITIVE_INFINITY;\\n\\n        uint256 resultExponent = xSignifier >> 128;\\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        if (xNegative && xSignifier != 0) {\\n          xSignifier = ~xSignifier;\\n          resultExponent += 1;\\n        }\\n\\n        uint256 resultSignifier = 0x80000000000000000000000000000000;\\n        if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n        if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\n        if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\n        if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\n        if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\n        if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\n        if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\n        if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\n        if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\n        if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\n        if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\n        if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\n        if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\n        if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\n        if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\n        if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\n        if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\n        if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\n        if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\n        if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\n        if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\n        if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\n        if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\n        if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\n        if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\n        if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\n        if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\n        if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\n        if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\n        if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\n        if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\n        if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\n        if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\n        if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\n        if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\n        if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\n        if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\n        if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\n        if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\n        if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\n        if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\n        if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\n        if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\n        if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\n        if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\n        if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\n        if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\n        if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\n        if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\n        if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\n        if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\n        if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\n        if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\n        if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\n        if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\n        if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\n        if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\n        if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\n        if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\n        if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\n        if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\n        if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\n        if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\n\\n        if (!xNegative) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent += 0x3FFF;\\n        } else if (resultExponent <= 0x3FFE) {\\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n          resultExponent = 0x3FFF - resultExponent;\\n        } else {\\n          resultSignifier = resultSignifier >> resultExponent - 16367;\\n          resultExponent = 0;\\n        }\\n\\n        return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate e^x.\\n   *\\n   * @param x quadruple precision number\\n   * @return quadruple precision number\\n   */\\n  function exp (bytes16 x) internal pure returns (bytes16) {\\n    unchecked {\\n      return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n    }\\n  }\\n\\n  /**\\n   * Get index of the most significant non-zero bit in binary representation of\\n   * x.  Reverts if x is zero.\\n   *\\n   * @return index of the most significant non-zero bit in binary representation\\n   *         of x\\n   */\\n  function mostSignificantBit (uint256 x) private pure returns (uint256) {\\n    unchecked {\\n      require (x > 0);\\n\\n      uint256 result = 0;\\n\\n      if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\\n      if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\\n      if (x >= 0x100000000) { x >>= 32; result += 32; }\\n      if (x >= 0x10000) { x >>= 16; result += 16; }\\n      if (x >= 0x100) { x >>= 8; result += 8; }\\n      if (x >= 0x10) { x >>= 4; result += 4; }\\n      if (x >= 0x4) { x >>= 2; result += 2; }\\n      if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n      return result;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9694a9f6fcadd4fa917efa674de42a74b8fbab8d68924f771ea5cc5e1a301434\",\"license\":\"BSD-4-Clause\"},\"contracts/implementation/PoolCommitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IPoolCommitter.sol\\\";\\nimport \\\"../interfaces/ILeveragedPool.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./PoolSwapLibrary.sol\\\";\\nimport \\\"../interfaces/IOracleWrapper.sol\\\";\\n\\n/// @title The pool controller contract\\ncontract PoolCommitter is IPoolCommitter, Ownable {\\n    // #### Globals\\n\\n    address public leveragedPool;\\n\\n    // MAX_UINT128\\n    uint128 public constant NO_COMMITS_REMAINING = type(uint128).max;\\n    uint128 public earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n    uint128 public latestCommitUnexecuted;\\n    uint128 public commitIDCounter;\\n    uint128 public minimumCommitSize; // The minimum amount (in settlement tokens) that a user can commit in a single commitment\\n    uint128 public maximumCommitQueueLength; // The maximum number of commitments that can be made for a given updateInterval\\n    uint128 public currentCommitQueueLength;\\n    mapping(uint128 => Commit) public commits;\\n    mapping(uint256 => uint256) public shadowPools;\\n\\n    address public factory;\\n    address public governance;\\n\\n    enum ScanDirection {\\n        UP,\\n        DOWN\\n    }\\n\\n    constructor(\\n        address _factory,\\n        uint128 _minimumCommitSize,\\n        uint128 _maximumCommitQueueLength\\n    ) {\\n        // set the factory on deploy\\n        factory = _factory;\\n        minimumCommitSize = _minimumCommitSize;\\n        maximumCommitQueueLength = _maximumCommitQueueLength;\\n        governance = IPoolFactory(factory).getOwner();\\n    }\\n\\n    /**\\n     * @notice Commit to minting/burning long/short tokens after the next price change\\n     * @param commitType Type of commit you're doing (Long vs Short, Mint vs Burn)\\n     * @param amount Amount of quote tokens you want to commit to minting; OR amount of pool\\n     *               tokens you want to burn\\n     */\\n    function commit(CommitType commitType, uint256 amount) external override {\\n        require(currentCommitQueueLength < maximumCommitQueueLength, \\\"Too many commits in interval\\\");\\n        currentCommitQueueLength += 1;\\n        require(amount > 0, \\\"Amount must not be zero\\\");\\n        uint128 currentCommitIDCounter = commitIDCounter;\\n        commitIDCounter = currentCommitIDCounter + 1;\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n\\n        // create commitment\\n        commits[currentCommitIDCounter] = Commit({\\n            commitType: commitType,\\n            amount: amount,\\n            owner: msg.sender,\\n            created: uint40(block.timestamp)\\n        });\\n        uint256 _commitType = commitTypeToUint(commitType);\\n        shadowPools[_commitType] = shadowPools[_commitType] + amount;\\n\\n        if (earliestCommitUnexecuted == NO_COMMITS_REMAINING) {\\n            earliestCommitUnexecuted = currentCommitIDCounter;\\n        }\\n        latestCommitUnexecuted = currentCommitIDCounter;\\n\\n        emit CreateCommit(currentCommitIDCounter, amount, commitType);\\n        uint256 shortBalance = pool.shortBalance();\\n        uint256 longBalance = pool.longBalance();\\n\\n        // pull in tokens\\n        if (commitType == CommitType.LongMint || commitType == CommitType.ShortMint) {\\n            // minting: pull in the quote token from the commiter\\n            require(amount >= minimumCommitSize, \\\"Amount less than minimum\\\");\\n            pool.quoteTokenTransferFrom(msg.sender, leveragedPool, amount);\\n        } else if (commitType == CommitType.LongBurn) {\\n            // long burning: pull in long pool tokens from commiter\\n\\n            // A theoretical amount based on current ratio. Used to get same units as minimumCommitSize\\n            uint256 amountOut = PoolSwapLibrary.getAmountOut(\\n                PoolSwapLibrary.getRatio(\\n                    longBalance,\\n                    IERC20(pool.poolTokens()[0]).totalSupply() +\\n                        shadowPools[commitTypeToUint(CommitType.LongBurn)] +\\n                        amount\\n                ),\\n                amount\\n            );\\n            require(amountOut >= minimumCommitSize, \\\"Amount less than minimum\\\");\\n            pool.burnTokens(0, amount, msg.sender);\\n        } else if (commitType == CommitType.ShortBurn) {\\n            // short burning: pull in short pool tokens from commiter\\n\\n            // A theoretical amount based on current ratio. Used to get same units as minimumCommitSize\\n            uint256 amountOut = PoolSwapLibrary.getAmountOut(\\n                PoolSwapLibrary.getRatio(\\n                    shortBalance,\\n                    IERC20(pool.poolTokens()[1]).totalSupply() +\\n                        shadowPools[commitTypeToUint(CommitType.ShortBurn)] +\\n                        amount\\n                ),\\n                amount\\n            );\\n            require(amountOut >= minimumCommitSize, \\\"Amount less than minimum\\\");\\n            pool.burnTokens(1, amount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Uncommit to minting/burning long/short tokens before the frontrunning interval ticks over\\n     * @param _commitID ID of the commit to uncommit (contained within the commits mapping)\\n     */\\n    function uncommit(uint128 _commitID) external override {\\n        Commit memory _commit = commits[_commitID];\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        uint256 lastPriceTimestamp = pool.lastPriceTimestamp();\\n        uint256 frontRunningInterval = pool.frontRunningInterval();\\n        uint256 updateInterval = pool.updateInterval();\\n        require(\\n            PoolSwapLibrary.isBeforeFrontRunningInterval(lastPriceTimestamp, updateInterval, frontRunningInterval),\\n            \\\"Must uncommit before frontRunningInterval\\\"\\n        );\\n        require(msg.sender == _commit.owner, \\\"Unauthorized\\\");\\n        _uncommit(_commit, _commitID);\\n    }\\n\\n    /**\\n     * @dev When required, scan through the from earliestCommitUnexecuted to latestCommitUnexecuted\\n     *      and set these variables to be correct based on which of the commits between them are\\n     *      uncommited.\\n     *      This is useful for when you uncommit the first or last commit, and you can scan backwards or forwards\\n     *      in order to find the new value earliestCommitUnexecuted or latestCommitUnexecuted should be set to.\\n     * @param direction UP if going from earliest to latest, DOWN if going from latest to earliest.\\n     */\\n    function skipDeletedMiddleCommits(ScanDirection direction) internal {\\n        if (direction == ScanDirection.UP) {\\n            uint128 nextEarliestCommitUnexecuted = earliestCommitUnexecuted;\\n            while (nextEarliestCommitUnexecuted <= latestCommitUnexecuted) {\\n                IPoolCommitter.Commit memory _commit = commits[nextEarliestCommitUnexecuted];\\n                if (_commit.owner == address(0)) {\\n                    // Commit deleted (uncommitted) or already executed\\n                    nextEarliestCommitUnexecuted += 1; // It makes sense to set the next unexecuted to the next number\\n                    continue;\\n                } else {\\n                    break;\\n                }\\n            }\\n            if (nextEarliestCommitUnexecuted > latestCommitUnexecuted) {\\n                // We have just bumped earliestCommitUnexecuted above latestCommitUnexecuted,\\n                // we have therefore run out of commits\\n                earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n            } else {\\n                earliestCommitUnexecuted = nextEarliestCommitUnexecuted;\\n            }\\n        }\\n\\n        if (direction == ScanDirection.DOWN) {\\n            uint128 nextLatestCommitUnexecuted = latestCommitUnexecuted;\\n            while (nextLatestCommitUnexecuted >= earliestCommitUnexecuted) {\\n                IPoolCommitter.Commit memory _commit = commits[nextLatestCommitUnexecuted];\\n                if (_commit.owner == address(0)) {\\n                    // Commit deleted (uncommitted) or already executed\\n                    nextLatestCommitUnexecuted -= 1;\\n                    continue;\\n                } else {\\n                    break;\\n                }\\n            }\\n            if (nextLatestCommitUnexecuted < earliestCommitUnexecuted) {\\n                // We have just bumped earliestCommitUnexecuted above latestCommitUnexecuted,\\n                // we have therefore run out of commits\\n                earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n            } else {\\n                latestCommitUnexecuted = nextLatestCommitUnexecuted;\\n            }\\n        }\\n    }\\n\\n    function _uncommit(Commit memory _commit, uint128 _commitID) internal {\\n        // reduce pool commitment amount\\n        uint256 _commitType = commitTypeToUint(_commit.commitType);\\n        shadowPools[_commitType] = shadowPools[_commitType] - _commit.amount;\\n        emit RemoveCommit(_commitID, _commit.amount, _commit.commitType);\\n\\n        delete commits[_commitID];\\n\\n        if (earliestCommitUnexecuted == _commitID) {\\n            // This is the first unexecuted commit, so we can bump this up one\\n            earliestCommitUnexecuted += 1;\\n            skipDeletedMiddleCommits(ScanDirection.UP);\\n        }\\n        if (latestCommitUnexecuted == _commitID && earliestCommitUnexecuted != NO_COMMITS_REMAINING) {\\n            // This is the latest commit unexecuted that we are trying to delete.\\n            latestCommitUnexecuted -= 1;\\n            skipDeletedMiddleCommits(ScanDirection.DOWN);\\n        }\\n\\n        // release tokens\\n        if (_commit.commitType == CommitType.LongMint || _commit.commitType == CommitType.ShortMint) {\\n            // minting: return quote tokens to the commit owner\\n            ILeveragedPool(leveragedPool).quoteTokenTransfer(msg.sender, _commit.amount);\\n        } else if (_commit.commitType == CommitType.LongBurn) {\\n            // long burning: return long pool tokens to commit owner\\n            ILeveragedPool(leveragedPool).mintTokens(0, _commit.amount, msg.sender);\\n        } else if (_commit.commitType == CommitType.ShortBurn) {\\n            // short burning: return short pool tokens to the commit owner\\n            ILeveragedPool(leveragedPool).mintTokens(1, _commit.amount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute all the pending commits of a market\\n     */\\n    function executeAllCommitments() external override onlyPool {\\n        if (earliestCommitUnexecuted == NO_COMMITS_REMAINING) {\\n            return;\\n        }\\n        currentCommitQueueLength = 0;\\n        uint128 nextEarliestCommitUnexecuted;\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        uint256 frontRunningInterval = pool.frontRunningInterval();\\n        uint256 lastPriceTimestamp = pool.lastPriceTimestamp();\\n        for (uint128 i = earliestCommitUnexecuted; i <= latestCommitUnexecuted; i++) {\\n            IPoolCommitter.Commit memory _commit = commits[i];\\n            nextEarliestCommitUnexecuted = i;\\n            // These two checks are so a given call to executeCommitment won't revert,\\n            // allowing us to continue iterations, as well as update nextEarliestCommitUnexecuted.\\n            if (_commit.owner == address(0)) {\\n                // Commit deleted (uncommitted) or already executed\\n                nextEarliestCommitUnexecuted += 1; // It makes sense to set the next unexecuted to the next number\\n                continue;\\n            }\\n            if (lastPriceTimestamp - _commit.created <= frontRunningInterval) {\\n                // This commit is the first that was too late.\\n                break;\\n            }\\n            emit ExecuteCommit(i);\\n            try IPoolCommitter(address(this)).executeCommitment(_commit) {\\n                delete commits[i];\\n            } catch {\\n                _uncommit(_commit, i);\\n                emit FailedCommitExecution(i);\\n            }\\n            if (i == latestCommitUnexecuted) {\\n                // We have reached the last one\\n                earliestCommitUnexecuted = NO_COMMITS_REMAINING;\\n                return;\\n            }\\n        }\\n        earliestCommitUnexecuted = nextEarliestCommitUnexecuted;\\n    }\\n\\n    /**\\n     * @notice Executes a single commitment\\n     * @param _commit The commit to execute\\n     */\\n    function executeCommitment(Commit memory _commit) external override onlySelf {\\n        ILeveragedPool pool = ILeveragedPool(leveragedPool);\\n        uint256 shortBalance = pool.shortBalance();\\n        uint256 longBalance = pool.longBalance();\\n        uint256 _commitType = commitTypeToUint(_commit.commitType);\\n        shadowPools[_commitType] = shadowPools[_commitType] - _commit.amount;\\n        if (_commit.commitType == CommitType.LongMint) {\\n            uint256 mintAmount = PoolSwapLibrary.getMintAmount(\\n                IERC20(pool.poolTokens()[0]).totalSupply(), // long token total supply,\\n                _commit.amount, // amount of quote tokens commited to enter\\n                longBalance, // total quote tokens in the long pull\\n                shadowPools[commitTypeToUint(CommitType.LongBurn)] // total pool tokens commited to be burned\\n            );\\n\\n            pool.mintTokens(0, mintAmount, _commit.owner);\\n            // update long and short balances\\n            pool.setNewPoolBalances(longBalance + _commit.amount, shortBalance);\\n        } else if (_commit.commitType == CommitType.LongBurn) {\\n            uint256 amountOut = PoolSwapLibrary.getAmountOut(\\n                PoolSwapLibrary.getRatio(\\n                    longBalance,\\n                    IERC20(pool.poolTokens()[0]).totalSupply() +\\n                        shadowPools[commitTypeToUint(CommitType.LongBurn)] +\\n                        _commit.amount\\n                ),\\n                _commit.amount\\n            );\\n\\n            // update long and short balances\\n            pool.setNewPoolBalances(longBalance - amountOut, shortBalance);\\n            pool.quoteTokenTransfer(_commit.owner, amountOut);\\n        } else if (_commit.commitType == CommitType.ShortMint) {\\n            uint256 mintAmount = PoolSwapLibrary.getMintAmount(\\n                IERC20(pool.poolTokens()[1]).totalSupply(), // short token total supply\\n                _commit.amount,\\n                shortBalance,\\n                shadowPools[commitTypeToUint(CommitType.ShortBurn)]\\n            );\\n\\n            pool.mintTokens(1, mintAmount, _commit.owner);\\n            pool.setNewPoolBalances(longBalance, shortBalance + _commit.amount);\\n        } else if (_commit.commitType == CommitType.ShortBurn) {\\n            uint256 amountOut = PoolSwapLibrary.getAmountOut(\\n                PoolSwapLibrary.getRatio(\\n                    shortBalance,\\n                    IERC20(pool.poolTokens()[1]).totalSupply() +\\n                        shadowPools[commitTypeToUint(CommitType.ShortBurn)] +\\n                        _commit.amount\\n                ),\\n                _commit.amount\\n            );\\n\\n            // update long and short balances\\n            pool.setNewPoolBalances(longBalance, shortBalance - amountOut);\\n            pool.quoteTokenTransfer(_commit.owner, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @return A Commit of a given ID\\n     */\\n    function getCommit(uint128 _commitID) public view override returns (Commit memory) {\\n        return commits[_commitID];\\n    }\\n\\n    function setQuoteAndPool(address _quoteToken, address _leveragedPool) external override onlyFactory {\\n        require(_quoteToken != address(0), \\\"Quote token address cannot be 0 address\\\");\\n        require(_leveragedPool != address(0), \\\"Leveraged pool address cannot be 0 address\\\");\\n        leveragedPool = _leveragedPool;\\n        IERC20 _token = IERC20(_quoteToken);\\n        _token.approve(leveragedPool, _token.totalSupply());\\n    }\\n\\n    function setMinimumCommitSize(uint128 _minimumCommitSize) external override onlyGov {\\n        minimumCommitSize = _minimumCommitSize;\\n    }\\n\\n    function setMaxCommitQueueLength(uint128 _maximumCommitQueueLength) external override onlyGov {\\n        require(_maximumCommitQueueLength > 0, \\\"Commit queue must be > 0\\\");\\n        maximumCommitQueueLength = _maximumCommitQueueLength;\\n    }\\n\\n    function commitTypeToUint(CommitType _commit) public pure returns (uint256) {\\n        if (_commit == CommitType.ShortMint) {\\n            return 0;\\n        } else if (_commit == CommitType.ShortBurn) {\\n            return 1;\\n        } else if (_commit == CommitType.LongMint) {\\n            return 2;\\n        } else if (_commit == CommitType.LongBurn) {\\n            return 3;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"Commiter: not factory\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(msg.sender == leveragedPool, \\\"msg.sender not leveragedPool\\\");\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"msg.sender not self\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"msg.sender not governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd9604a3f7ab0d00d632a8676f5d4dd48c3e40c287660804683e5350edf1b21a4\",\"license\":\"MIT\"},\"contracts/implementation/PoolCommitterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./PoolCommitter.sol\\\";\\nimport \\\"../interfaces/IPoolCommitterDeployer.sol\\\";\\n\\n/// @title The deployer of the PoolCommitter contract\\ncontract PoolCommitterDeployer is IPoolCommitterDeployer {\\n    address public factory;\\n\\n    constructor(address _factory) {\\n        factory = _factory;\\n    }\\n\\n    function deploy(uint128 _minimumCommitSize, uint128 _maximumCommitQueueLength)\\n        external\\n        override\\n        onlyFactory\\n        returns (address)\\n    {\\n        return address(new PoolCommitter(factory, _minimumCommitSize, _maximumCommitQueueLength));\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"msg.sender not factory\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb8160f71fc3cfb678fada6d094effe1d6695e4ba6e133f0e4fb908946ddc1705\",\"license\":\"MIT\"},\"contracts/implementation/PoolSwapLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"abdk-libraries-solidity/ABDKMathQuad.sol\\\";\\n\\n/// @title Library for various useful (mostly) mathematical functions\\nlibrary PoolSwapLibrary {\\n    bytes16 public constant one = 0x3fff0000000000000000000000000000;\\n    bytes16 public constant zero = 0x00000000000000000000000000000000;\\n    uint256 public constant MAX_DECIMALS = 18;\\n\\n    struct PriceChangeData {\\n        int256 oldPrice;\\n        int256 newPrice;\\n        uint256 longBalance;\\n        uint256 shortBalance;\\n        bytes16 leverageAmount;\\n        bytes16 fee;\\n    }\\n\\n    /**\\n     * @notice Calculates the ratio between two numbers\\n     * @dev Rounds any overflow towards 0. If either parameter is zero, the ratio is 0\\n     * @param _numerator The \\\"parts per\\\" side of the equation. If this is zero, the ratio is zero\\n     * @param _denominator The \\\"per part\\\" side of the equation. If this is zero, the ratio is zero\\n     * @return the ratio, as an ABDKMathQuad number (IEEE 754 quadruple precision floating point)\\n     */\\n    function getRatio(uint256 _numerator, uint256 _denominator) public pure returns (bytes16) {\\n        // Catch the divide by zero error.\\n        if (_denominator == 0) {\\n            return 0;\\n        }\\n        return ABDKMathQuad.div(ABDKMathQuad.fromUInt(_numerator), ABDKMathQuad.fromUInt(_denominator));\\n    }\\n\\n    /**\\n     * @notice Gets the short and long balances after the keeper rewards have been paid out\\n     *         Keeper rewards are paid proportionally to the short and long pool\\n     * @dev Assumes shortBalance + longBalance >= reward\\n     * @param reward Amount of keeper reward\\n     * @param shortBalance Short balance of the pool\\n     * @param longBalance Long balance of the pool\\n     * @return shortBalanceAfterFees Short balance of the pool after the keeper reward has been paid\\n     * @return longBalanceAfterFees Long balance of the pool after the keeper reward has been paid\\n     */\\n    function getBalancesAfterFees(\\n        uint256 reward,\\n        uint256 shortBalance,\\n        uint256 longBalance\\n    ) public pure returns (uint256, uint256) {\\n        bytes16 ratioShort = getRatio(shortBalance, shortBalance + longBalance);\\n\\n        uint256 shortFees = convertDecimalToUInt(multiplyDecimalByUInt(ratioShort, reward));\\n\\n        uint256 shortBalanceAfterFees = shortBalance - shortFees;\\n        uint256 longBalanceAfterFees = longBalance - (reward - shortFees);\\n\\n        // Return shortBalance and longBalance after rewards are paid out\\n        return (shortBalanceAfterFees, longBalanceAfterFees);\\n    }\\n\\n    /**\\n     * @notice Gets the amount of tokens a user is entitled to according to the ratio\\n     * @dev This is useful for getting the amount of pool tokens to mint, and the amount of quote tokens to remit when minting and burning. Can also be used to provide the user with an estimate of their commit results.\\n     * @param ratio The ratio to calculate. Use the getRatio function to calculate this\\n     * @param amountIn The amount of tokens the user is providing. This can be quote tokens or pool tokens.\\n     * @return The amount of tokens to mint/remit to the user.\\n     */\\n    function getAmountOut(bytes16 ratio, uint256 amountIn) public pure returns (uint256) {\\n        require(amountIn > 0, \\\"Invalid amount\\\");\\n        if (ABDKMathQuad.cmp(ratio, 0) == 0 || ABDKMathQuad.cmp(ratio, bytes16(\\\"0x1\\\")) == 0) {\\n            return amountIn;\\n        }\\n        return ABDKMathQuad.toUInt(ABDKMathQuad.mul(ratio, ABDKMathQuad.fromUInt(amountIn)));\\n    }\\n\\n    /**\\n     * @notice Compares two decimal numbers\\n     * @param x The first number to compare\\n     * @param y The second number to compare\\n     * @return -1 if x < y, 0 if x = y, or 1 if x > y\\n     */\\n    function compareDecimals(bytes16 x, bytes16 y) public pure returns (int8) {\\n        return ABDKMathQuad.cmp(x, y);\\n    }\\n\\n    /**\\n     * @notice Converts an integer value to a compatible decimal value\\n     * @param amount The amount to convert\\n     * @return The amount as a IEEE754 quadruple precision number\\n     */\\n    function convertUIntToDecimal(uint256 amount) external pure returns (bytes16) {\\n        return ABDKMathQuad.fromUInt(amount);\\n    }\\n\\n    /**\\n     * @notice Converts a raw decimal value to a more readable uint256 value\\n     * @param ratio The value to convert\\n     * @return The converted value\\n     */\\n    function convertDecimalToUInt(bytes16 ratio) public pure returns (uint256) {\\n        return ABDKMathQuad.toUInt(ratio);\\n    }\\n\\n    /**\\n     * @notice Multiplies a decimal and an unsigned integer\\n     * @param a The first term\\n     * @param b The second term\\n     * @return The product of a*b as a decimal\\n     */\\n    function multiplyDecimalByUInt(bytes16 a, uint256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.mul(a, ABDKMathQuad.fromUInt(b));\\n    }\\n\\n    /**\\n     * @notice Divides two integers\\n     * @param a The dividend\\n     * @param b The divisor\\n     * @return The quotient\\n     */\\n    function divInt(int256 a, int256 b) public pure returns (bytes16) {\\n        return ABDKMathQuad.div(ABDKMathQuad.fromInt(a), ABDKMathQuad.fromInt(b));\\n    }\\n\\n    /**\\n     * @notice Calculates the loss multiplier to apply to the losing pool. Includes the power leverage\\n     * @param ratio The ratio of new price to old price\\n     * @param direction The direction of the change. -1 if it's decreased, 0 if it hasn't changed, and 1 if it's increased\\n     * @param leverage The amount of leverage to apply\\n     * @return The multiplier\\n     */\\n    function getLossMultiplier(\\n        bytes16 ratio,\\n        int8 direction,\\n        bytes16 leverage\\n    ) public pure returns (bytes16) {\\n        // If decreased:  2 ^ (leverage * log2[(1 * new/old) + [(0 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2[(new/old)])\\n        // If increased:  2 ^ (leverage * log2[(0 * new/old) + [(1 * 1) / new/old]])\\n        //              = 2 ^ (leverage * log2([1 / new/old]))\\n        //              = 2 ^ (leverage * log2([old/new]))\\n        return\\n            ABDKMathQuad.pow_2(\\n                ABDKMathQuad.mul(\\n                    leverage,\\n                    ABDKMathQuad.log_2(\\n                        ABDKMathQuad.add(\\n                            ABDKMathQuad.mul(direction < 0 ? one : zero, ratio),\\n                            ABDKMathQuad.div(ABDKMathQuad.mul(direction >= 0 ? one : zero, one), ratio)\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the amount to take from the losing pool\\n     * @param lossMultiplier The multiplier to use\\n     * @param balance The balance of the losing pool\\n     */\\n    function getLossAmount(bytes16 lossMultiplier, uint256 balance) public pure returns (uint256) {\\n        return\\n            ABDKMathQuad.toUInt(\\n                ABDKMathQuad.mul(ABDKMathQuad.sub(one, lossMultiplier), ABDKMathQuad.fromUInt(balance))\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the effect of a price change. This involves calculating how many funds to transfer from the losing pool to the other.\\n     * @dev This function should be called by the LeveragedPool.\\n     * @param priceChange The struct containing necessary data to calculate price change\\n     */\\n    function calculatePriceChange(PriceChangeData memory priceChange)\\n        public\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 shortBalance = priceChange.shortBalance;\\n        uint256 longBalance = priceChange.longBalance;\\n        bytes16 leverageAmount = priceChange.leverageAmount;\\n        int256 oldPrice = priceChange.oldPrice;\\n        int256 newPrice = priceChange.newPrice;\\n        bytes16 fee = priceChange.fee;\\n\\n        // Calculate fees from long and short sides\\n        uint256 longFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, longBalance));\\n        uint256 shortFeeAmount = convertDecimalToUInt(multiplyDecimalByUInt(fee, shortBalance));\\n        uint256 totalFeeAmount = 0;\\n\\n        // fee is enforced to be < 1. Therefore, shortFeeAmount < shortBalance, and longFeeAmount < longBalance\\n        shortBalance = shortBalance - shortFeeAmount;\\n        totalFeeAmount = totalFeeAmount + shortFeeAmount;\\n        longBalance = longBalance - longFeeAmount;\\n        totalFeeAmount = totalFeeAmount + longFeeAmount;\\n\\n        // Use the ratio to determine if the price increased or decreased and therefore which direction\\n        // the funds should be transferred towards.\\n\\n        bytes16 ratio = divInt(newPrice, oldPrice);\\n        int8 direction = compareDecimals(ratio, PoolSwapLibrary.one);\\n        // Take into account the leverage\\n        bytes16 lossMultiplier = getLossMultiplier(ratio, direction, leverageAmount);\\n\\n        if (direction >= 0 && shortBalance > 0) {\\n            // Move funds from short to long pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, shortBalance);\\n            shortBalance = shortBalance - lossAmount;\\n            longBalance = longBalance + lossAmount;\\n        } else if (direction < 0 && longBalance > 0) {\\n            // Move funds from long to short pair\\n            uint256 lossAmount = getLossAmount(lossMultiplier, longBalance);\\n            shortBalance = shortBalance + lossAmount;\\n            longBalance = longBalance - lossAmount;\\n        }\\n\\n        return (longBalance, shortBalance, totalFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns true if the function is being called BEFORE the frontRunningInterval starts,\\n     *         which is allowed for uncommitment.\\n     * @dev If you try to uncommit AFTER the frontRunningInterval, it should revert.\\n     */\\n    function isBeforeFrontRunningInterval(\\n        uint256 lastPriceTimestamp,\\n        uint256 updateInterval,\\n        uint256 frontRunningInterval\\n    ) external view returns (bool) {\\n        return lastPriceTimestamp + updateInterval - frontRunningInterval > block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Gets the number of pool tokens to be minted based on existing tokens\\n     * @param tokenSupply Total supply of pool tokens\\n     * @param amountIn Commitment amount of collateral tokens going into the pool\\n     * @param balance Balance of the pool (no. of underlying collateral tokens in pool)\\n     * @param inverseShadowbalance Balance the shadow pool at time of mint\\n     * @return Number of pool tokens to be minted\\n     */\\n    function getMintAmount(\\n        uint256 tokenSupply,\\n        uint256 amountIn,\\n        uint256 balance,\\n        uint256 inverseShadowbalance\\n    ) external pure returns (uint256) {\\n        return\\n            getAmountOut(\\n                // ratio = (totalSupply + inverseShadowBalance) / balance\\n                getRatio(tokenSupply + inverseShadowbalance, balance),\\n                amountIn\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(uint256 _wadValue, uint256 _decimals) external pure returns (uint256) {\\n        uint256 scaler = uint256(10**(MAX_DECIMALS - _decimals));\\n        return _wadValue / scaler;\\n    }\\n}\\n\",\"keccak256\":\"0xa8b0a11c35997336f21b2fe031e46163b8a322cc0b16ccd83cb5d7019698cb71\",\"license\":\"MIT\"},\"contracts/interfaces/ILeveragedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title The pool controller contract interface\\ninterface ILeveragedPool {\\n    // Initialisation parameters for new market\\n    struct Initialization {\\n        address _owner; // Owner of the contract\\n        address _keeper; // The address of the PoolKeeper contract\\n        address _oracleWrapper; // The oracle wrapper for the derivative price feed\\n        address _settlementEthOracle; // The oracle wrapper for the SettlementToken/ETH price feed\\n        address _longToken; // Address of the long pool token\\n        address _shortToken; // Address of the short pool token\\n        address _poolCommitter; // Address of the PoolCommitter contract\\n        string _poolName; // The pool identification name\\n        uint32 _frontRunningInterval; // The minimum number of seconds that must elapse before a commit is forced to wait until the next interval\\n        uint32 _updateInterval; // The minimum number of seconds that must elapse before a commit can be executed\\n        bytes16 _fee; // The fund movement fee. This amount is extracted from the deposited asset with every update and sent to the fee address\\n        uint16 _leverageAmount; // The amount of exposure to price movements for the pool\\n        address _feeAddress; // The address that the fund movement fee is sent to\\n        address _quoteToken; //  The digital asset that the pool accepts. Must have a decimals() function\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when the pool is setup and ready for use\\n     * @param longToken The address of the LONG pair token\\n     * @param shortToken The address of the SHORT pair token\\n     * @param quoteToken The address of the digital asset that the pool accepts\\n     * @param poolName The pool code for the pool\\n     */\\n    event PoolInitialized(address indexed longToken, address indexed shortToken, address quoteToken, string poolName);\\n\\n    /**\\n     * @notice Creates a notification when the pool's upkeep succeeds\\n     * @param startPrice Price prior to price change execution\\n     * @param endPrice Price during price change execution\\n     */\\n    event CompletedUpkeep(int256 indexed startPrice, int256 indexed endPrice);\\n\\n    /**\\n     * @notice Creates a notification when the pool's price execution fails\\n     * @param startPrice Price prior to price change execution\\n     * @param endPrice Price during price change execution\\n     */\\n    event PriceChangeError(int256 indexed startPrice, int256 indexed endPrice);\\n\\n    /**\\n     * @notice Represents change in fee receiver's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event FeeAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in keeper's address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event KeeperAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Represents change in governance address\\n     * @param oldAddress Previous address\\n     * @param newAddress Address after change\\n     */\\n    event GovernanceAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    function leverageAmount() external view returns (bytes16);\\n\\n    function poolCommitter() external view returns (address);\\n\\n    function quoteToken() external view returns (address);\\n\\n    function oracleWrapper() external view returns (address);\\n\\n    function lastPriceTimestamp() external view returns (uint256);\\n\\n    function poolName() external view returns (string calldata);\\n\\n    function updateInterval() external view returns (uint32);\\n\\n    function shortBalance() external view returns (uint256);\\n\\n    function longBalance() external view returns (uint256);\\n\\n    function frontRunningInterval() external view returns (uint32);\\n\\n    function poolTokens() external view returns (address[2] memory);\\n\\n    function settlementEthOracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Configures the pool on deployment. The pools are EIP 1167 clones.\\n     * @dev This should only be able to be run once to prevent abuse of the pool. Use of Openzeppelin Initializable or similar is recommended\\n     * @param initialization The struct Initialization containing initialization data\\n     */\\n    function initialize(Initialization calldata initialization) external;\\n\\n    function poolUpkeep(int256 _oldPrice, int256 _newPrice) external;\\n\\n    function quoteTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function payKeeperFromBalances(address to, uint256 amount) external returns (bool);\\n\\n    function quoteTokenTransfer(address to, uint256 amount) external;\\n\\n    function setNewPoolBalances(uint256 _longBalance, uint256 _shortBalance) external;\\n\\n    function getOraclePrice() external view returns (int256);\\n\\n    function intervalPassed() external view returns (bool);\\n\\n    function setKeeper(address _keeper) external;\\n\\n    function transferGovernance(address _governance) external;\\n\\n    function updateFeeAddress(address account) external;\\n\\n    function mintTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n\\n    function burnTokens(\\n        uint256 token,\\n        uint256 amount,\\n        address burner\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfc7f75a451ff8ccaf06a561bdc2e6f5f9d7e0c98dedd65058697808094b3f29d\",\"license\":\"MIT\"},\"contracts/interfaces/IOracleWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title The oracle wrapper contract interface\\ninterface IOracleWrapper {\\n    function oracle() external view returns (address);\\n\\n    // #### Functions\\n    /**\\n     * @notice Sets the oracle for a given market\\n     * @dev Should be secured, ideally only allowing the PoolKeeper to access\\n     * @param _oracle The oracle to set for the market\\n     */\\n    function setOracle(address _oracle) external;\\n\\n    /**\\n     * @notice Returns the current price for the asset in question\\n     * @return The latest price\\n     */\\n    function getPrice() external view returns (int256);\\n\\n    /**\\n     * @notice Converts from a WAD to normal value\\n     * @return Converted non-WAD value\\n     */\\n    function fromWad(int256 wad) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x50208d67530278ea883fdf273fcc3b2760eefaec6f1eedc871692e28d0b9717a\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolCommitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title The interface for the contract that handles pool commitments\\ninterface IPoolCommitter {\\n    /// Type of commit\\n    enum CommitType {\\n        ShortMint,\\n        ShortBurn,\\n        LongMint,\\n        LongBurn\\n    }\\n\\n    // Commit information\\n    struct Commit {\\n        uint256 amount;\\n        CommitType commitType;\\n        uint40 created;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice Creates a notification when a commit is created\\n     * @param commitID ID of the commit\\n     * @param amount Amount of the commit\\n     * @param commitType Type of the commit (Short v Long, Mint v Burn)\\n     */\\n    event CreateCommit(uint128 indexed commitID, uint256 indexed amount, CommitType indexed commitType);\\n\\n    /**\\n     * @notice Creates a notification when a commit is removed (uncommitted)\\n     * @param commitID ID of the commit\\n     * @param amount Amount of the commit\\n     * @param commitType Type of the commit (Short v Long, Mint v Burn)\\n     */\\n    event RemoveCommit(uint128 indexed commitID, uint256 indexed amount, CommitType indexed commitType);\\n\\n    /**\\n     * @notice Creates a notification when a commit is executed\\n     * @param commitID ID of the commit that's executed\\n     */\\n    event ExecuteCommit(uint128 commitID);\\n\\n    /**\\n     * @notice Creates a notification when a commit fails to execute\\n     * @param commitID ID of the commit\\n     */\\n    event FailedCommitExecution(uint128 commitID);\\n\\n    // #### Functions\\n\\n    function commit(CommitType commitType, uint256 amount) external;\\n\\n    function uncommit(uint128 commitID) external;\\n\\n    function executeAllCommitments() external;\\n\\n    function executeCommitment(Commit memory _commit) external;\\n\\n    function getCommit(uint128 _commitID) external view returns (Commit memory);\\n\\n    function setQuoteAndPool(address quoteToken, address leveragedPool) external;\\n\\n    function setMinimumCommitSize(uint128 _minimumCommitSize) external;\\n\\n    function setMaxCommitQueueLength(uint128 _maximumCommitQueueLength) external;\\n}\\n\",\"keccak256\":\"0x602718554992ab204a77c98e7425c22a2c9838cbcb16e912395fc132cf5e3c2c\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolCommitterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title The PoolCommitterDeployer interface\\ninterface IPoolCommitterDeployer {\\n    function deploy(uint128 _minimumCommitSize, uint128 _maximumCommitQueueLength) external returns (address);\\n}\\n\",\"keccak256\":\"0xa8b0851c1340d8c21df73c57b02f183155af77aa6e61c69da4c5c41113ce9e21\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title The contract factory for the keeper and pool contracts. Utilizes minimal clones to keep gas costs low\\ninterface IPoolFactory {\\n    struct PoolDeployment {\\n        string poolName; // The name to identify a pool by\\n        uint32 frontRunningInterval; // The minimum number of seconds that must elapse before a commit can be executed. Must be smaller than or equal to the update interval to prevent deadlock\\n        uint32 updateInterval; // The minimum number of seconds that must elapse before a price change\\n        uint16 leverageAmount; // The amount of exposure to price movements for the pool\\n        address quoteToken; // The digital asset that the pool accepts\\n        address oracleWrapper; // The IOracleWrapper implementation for fetching price feed data\\n        address settlementEthOracle; // The oracle to fetch the price of Ether in terms of the settlement token\\n        uint128 minimumCommitSize; // The minimum amount (in settlement tokens) that a user can commit in a single commitment\\n        uint128 maximumCommitQueueLength; // The maximum number of commitments that can be made for a given updateInterval\\n    }\\n\\n    // #### Events\\n    /**\\n     * @notice Creates a notification when a pool is deployed\\n     * @param pool Address of the new pool\\n     * @param ticker Ticker of the neew pool\\n     */\\n    event DeployPool(address indexed pool, string ticker);\\n\\n    // #### Getters for Globals\\n    function pools(uint256 id) external view returns (address);\\n\\n    function numPools() external view returns (uint256);\\n\\n    function isValidPool(address _pool) external view returns (bool);\\n\\n    // #### Functions\\n    function deployPool(PoolDeployment calldata deploymentParameters) external returns (address);\\n\\n    function getOwner() external returns (address);\\n\\n    function setPoolKeeper(address _poolKeeper) external;\\n\\n    function setMaxLeverage(uint16 newMaxLeverage) external;\\n\\n    function setFeeReceiver(address _feeReceiver) external;\\n\\n    function setFee(bytes16 _fee) external;\\n\\n    function setPoolCommitterDeployer(address _poolCommitterDeployer) external;\\n}\\n\",\"keccak256\":\"0x5849c67f7bd35d16b51d820938d42cc71c3df05e0fc75c917bdc9cf77a2c5def\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615dc4380380615dc48339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610087816100f1565b92915050565b6000602082840312156100a3576100a26100ec565b5b60006100b184828501610078565b91505092915050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fa816100ba565b811461010557600080fd5b50565b615cad806101176000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063960419831461003b578063c45a01551461006b575b600080fd5b610055600480360381019061005091906101c1565b610089565b6040516100629190610242565b60405180910390f35b61007361017a565b6040516100809190610242565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011190610294565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836040516101499061019e565b6101559392919061025d565b604051809103906000f080158015610171573d6000803e3d6000fd5b50905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61591f806200035983390190565b6000813590506101bb81610341565b92915050565b600080604083850312156101d8576101d7610313565b5b60006101e6858286016101ac565b92505060206101f7858286016101ac565b9150509250929050565b61020a816102c5565b82525050565b600061021d6016836102b4565b915061022882610318565b602082019050919050565b61023c816102d7565b82525050565b60006020820190506102576000830184610201565b92915050565b60006060820190506102726000830186610201565b61027f6020830185610233565b61028c6040830184610233565b949350505050565b600060208201905081810360008301526102ad81610210565b9050919050565b600082825260208201905092915050565b60006102d0826102f3565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f6d73672e73656e646572206e6f7420666163746f727900000000000000000000600082015250565b61034a816102d7565b811461035557600080fd5b5056fe60806040526fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503480156200005a57600080fd5b506040516200591f3803806200591f83398181016040528101906200008091906200036e565b620000a0620000946200024260201b60201c565b6200024a60201b60201c565b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620001be57600080fd5b505af1158015620001d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f991906200033c565b600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000453565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200031f816200041f565b92915050565b600081519050620003368162000439565b92915050565b6000602082840312156200035557620003546200041a565b5b600062000365848285016200030e565b91505092915050565b6000806000606084860312156200038a57620003896200041a565b5b60006200039a868287016200030e565b9350506020620003ad8682870162000325565b9250506040620003c08682870162000325565b9150509250925092565b6000620003d782620003fa565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200042a81620003ca565b81146200043657600080fd5b50565b6200044481620003de565b81146200045057600080fd5b50565b6154bc80620004636000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638bf13f82116100c3578063d44b1ff31161007c578063d44b1ff314610394578063e323aac6146103b2578063f2fde38b146103d0578063f9495c9c146103ec578063f9a0e14e14610408578063fd555fb91461042657610158565b80638bf13f82146102d05780638da5cb5b146102ee5780639eda0cc21461030c578063b3fecffe1461032a578063c45a015514610346578063caf4c2c51461036457610158565b80635aa6e675116101155780635aa6e67514610222578063605814fc1461024057806364d5366014610270578063685544a61461028e578063715018a6146102aa578063822255de146102b457610158565b80631c536da41461015d57806329075d711461016757806330f752601461019a57806341397577146101b85780634b2ec831146101e857806351b450f614610206575b600080fd5b610165610442565b005b610181600480360381019061017c919061455a565b610ae7565b6040516101919493929190614c33565b60405180910390f35b6101a2610b55565b6040516101af9190614bfd565b60405180910390f35b6101d260048036038101906101cd9190614587565b610b69565b6040516101df9190614c18565b60405180910390f35b6101f0610b81565b6040516101fd9190614bfd565b60405180910390f35b610220600480360381019061021b919061455a565b610ba3565b005b61022a610fb4565b6040516102379190614910565b60405180910390f35b61025a600480360381019061025591906144c0565b610fda565b6040516102679190614c18565b60405180910390f35b6102786110bc565b6040516102859190614bfd565b60405180910390f35b6102a860048036038101906102a3919061455a565b6110de565b005b6102b26111aa565b005b6102ce60048036038101906102c991906144ed565b611232565b005b6102d8611fdc565b6040516102e59190614bfd565b60405180910390f35b6102f6611ffe565b6040516103039190614910565b60405180910390f35b610314612027565b6040516103219190614bfd565b60405180910390f35b610344600480360381019061033f919061452d565b612049565b005b61034e612f04565b60405161035b9190614910565b60405180910390f35b61037e6004803603810190610379919061455a565b612f2a565b60405161038b9190614be2565b60405180910390f35b61039c61303f565b6040516103a99190614bfd565b60405180910390f35b6103ba613061565b6040516103c79190614910565b60405180910390f35b6103ea60048036038101906103e591906143cc565b613087565b005b6104066004803603810190610401919061455a565b61317f565b005b6104106132a0565b60405161041d9190614bfd565b60405180910390f35b610440600480360381019061043b91906143f9565b6132c2565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c990614b82565b60405180910390fd5b6fffffffffffffffffffffffffffffffff8016600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16141561052157610ae5565b6000600460106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105cb57600080fd5b505afa1580156105df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060391906145e1565b63ffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff16637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b15801561065357600080fd5b505afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b91906145b4565b90506000600260009054906101000a90046fffffffffffffffffffffffffffffffff1690505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1611610aa657600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff16600381111561076d5761076c615039565b5b600381111561077f5761077e615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050819550600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614156108555760018661084d9190614da2565b955050610a93565b83816040015164ffffffffff168461086d9190614e72565b116108785750610aa6565b7f53e7d7eb888194c67870ec86b8523606069fb6eeeab81f458a6065b9e88defa9826040516108a79190614bfd565b60405180910390a13073ffffffffffffffffffffffffffffffffffffffff1663b3fecffe826040518263ffffffff1660e01b81526004016108e89190614be2565b600060405180830381600087803b15801561090257600080fd5b505af1925050508015610913575060015b61095d5761092181836135aa565b7f089a8e68b5afa612f76f7ec1235a9d9d07e0d79462a6b0d862aaa0ac035426c1826040516109509190614bfd565b60405180910390a16109f3565b60056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549064ffffffffff02191690556001820160066101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161415610a91576fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050505050610ae5565b505b8080610a9e90614fd1565b9150506106b1565b5083600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050505b565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900464ffffffffff16908060010160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b6fffffffffffffffffffffffffffffffff81565b60066020528060005260406000206000915090505481565b600360109054906101000a90046fffffffffffffffffffffffffffffffff1681565b600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115610c1657610c15615039565b5b6003811115610c2857610c27615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5491906145b4565b905060008273ffffffffffffffffffffffffffffffffffffffff16637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd691906145e1565b63ffffffff16905060008373ffffffffffffffffffffffffffffffffffffffff1663fd2c80ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2657600080fd5b505afa158015610e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5e91906145e1565b63ffffffff169050733FE070eC913099fcBd96c18524F873D7c3F95F4863aaa578b28483856040518463ffffffff1660e01b8152600401610ea193929190614cca565b60206040518083038186803b158015610eb957600080fd5b505af4158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190614466565b610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2790614b22565b60405180910390fd5b846060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9990614a62565b60405180910390fd5b610fac85876135aa565b505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806003811115610fef57610fee615039565b5b82600381111561100257611001615039565b5b141561101157600090506110b7565b6001600381111561102557611024615039565b5b82600381111561103857611037615039565b5b141561104757600190506110b7565b6002600381111561105b5761105a615039565b5b82600381111561106e5761106d615039565b5b141561107d57600290506110b7565b6003808111156110905761108f615039565b5b8260038111156110a3576110a2615039565b5b14156110b257600390506110b7565b600090505b919050565b600460009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116590614bc2565b60405180910390fd5b80600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6111b2613b3b565b73ffffffffffffffffffffffffffffffffffffffff166111d0611ffe565b73ffffffffffffffffffffffffffffffffffffffff1614611226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121d90614b42565b60405180910390fd5b6112306000613b43565b565b600460009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600460109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16106112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cb90614ba2565b60405180910390fd5b6001600460108282829054906101000a90046fffffffffffffffffffffffffffffffff166113029190614da2565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000811161137b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137290614ac2565b60405180910390fd5b6000600360009054906101000a90046fffffffffffffffffffffffffffffffff1690506001816113ab9190614da2565b600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050604051806080016040528084815260200185600381111561142e5761142d615039565b5b81526020014264ffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525060056000846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908360038111156114c6576114c5615039565b5b021790555060408201518160010160016101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160010160066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600061154985610fda565b905083600660008381526020019081526020016000205461156a9190614de8565b60066000838152602001908152602001600020819055506fffffffffffffffffffffffffffffffff8016600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614156116055782600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b82600260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555084600381111561165157611650615039565b5b84846fffffffffffffffffffffffffffffffff167feeb519088468e5ea7765bbf8c4464c3bde5ff110d8de10ee5db057be2599d1fc60405160405180910390a460008273ffffffffffffffffffffffffffffffffffffffff1663ba8d54686040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d957600080fd5b505afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171191906145b4565b905060008373ffffffffffffffffffffffffffffffffffffffff16637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561175b57600080fd5b505afa15801561176f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179391906145b4565b9050600260038111156117a9576117a8615039565b5b8760038111156117bc576117bb615039565b5b14806117ec5750600060038111156117d7576117d6615039565b5b8760038111156117ea576117e9615039565b5b145b156118fa57600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16861015611864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185b90614ae2565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16637b0a0c9033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b81526004016118c39392919061492b565b600060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b50505050611fd3565b60038081111561190d5761190c615039565b5b8760038111156119205761191f615039565b5b1415611c67576000733FE070eC913099fcBd96c18524F873D7c3F95F4863cda8198c733FE070eC913099fcBd96c18524F873D7c3F95F4863cff70001858b6006600061196c6003610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156119c057600080fd5b505afa1580156119d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f89190614439565b600060028110611a0b57611a0a615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d91906145b4565b611a979190614de8565b611aa19190614de8565b6040518363ffffffff1660e01b8152600401611abe929190614c78565b60206040518083038186803b158015611ad657600080fd5b505af4158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190614493565b896040518363ffffffff1660e01b8152600401611b2c92919061498b565b60206040518083038186803b158015611b4457600080fd5b505af4158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c91906145b4565b9050600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16811015611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be890614ae2565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166387f9ca5d600089336040518463ffffffff1660e01b8152600401611c2f939291906149b4565b600060405180830381600087803b158015611c4957600080fd5b505af1158015611c5d573d6000803e3d6000fd5b5050505050611fd2565b60016003811115611c7b57611c7a615039565b5b876003811115611c8e57611c8d615039565b5b1415611fd1576000733FE070eC913099fcBd96c18524F873D7c3F95F4863cda8198c733FE070eC913099fcBd96c18524F873D7c3F95F4863cff70001868b60066000611cda6001610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b158015611d2e57600080fd5b505afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190614439565b600160028110611d7957611d78615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc357600080fd5b505afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb91906145b4565b611e059190614de8565b611e0f9190614de8565b6040518363ffffffff1660e01b8152600401611e2c929190614c78565b60206040518083038186803b158015611e4457600080fd5b505af4158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c9190614493565b896040518363ffffffff1660e01b8152600401611e9a92919061498b565b60206040518083038186803b158015611eb257600080fd5b505af4158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea91906145b4565b9050600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16811015611f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5690614ae2565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166387f9ca5d600189336040518463ffffffff1660e01b8152600401611f9d939291906149eb565b600060405180830381600087803b158015611fb757600080fd5b505af1158015611fcb573d6000803e3d6000fd5b50505050505b5b5b50505050505050565b600460109054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a90046fffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ae90614b02565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ba8d54686040518163ffffffff1660e01b815260040160206040518083038186803b15801561212657600080fd5b505afa15801561213a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215e91906145b4565b905060008273ffffffffffffffffffffffffffffffffffffffff16637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121a857600080fd5b505afa1580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e091906145b4565b905060006121f18560200151610fda565b9050846000015160066000838152602001908152602001600020546122169190614e72565b60066000838152602001908152602001600020819055506002600381111561224157612240615039565b5b8560200151600381111561225857612257615039565b5b1415612516576000733FE070eC913099fcBd96c18524F873D7c3F95F4863ab41556f8673ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156122bf57600080fd5b505afa1580156122d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f79190614439565b60006002811061230a57612309615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561235457600080fd5b505afa158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238c91906145b4565b886000015186600660006123a06003610fda565b8152602001908152602001600020546040518563ffffffff1660e01b81526004016123ce9493929190614d01565b60206040518083038186803b1580156123e657600080fd5b505af41580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e91906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff166375c66e2f60008389606001516040518463ffffffff1660e01b8152600401612462939291906149b4565b600060405180830381600087803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16633c3f82528760000151856124c09190614de8565b866040518363ffffffff1660e01b81526004016124de929190614ca1565b600060405180830381600087803b1580156124f857600080fd5b505af115801561250c573d6000803e3d6000fd5b5050505050612efd565b60038081111561252957612528615039565b5b856020015160038111156125405761253f615039565b5b1415612895576000733FE070eC913099fcBd96c18524F873D7c3F95F4863cda8198c733FE070eC913099fcBd96c18524F873D7c3F95F4863cff70001868a60000151600660006125906003610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156125e457600080fd5b505afa1580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190614439565b60006002811061262f5761262e615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561267957600080fd5b505afa15801561268d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b191906145b4565b6126bb9190614de8565b6126c59190614de8565b6040518363ffffffff1660e01b81526004016126e2929190614c78565b60206040518083038186803b1580156126fa57600080fd5b505af415801561270e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127329190614493565b88600001516040518363ffffffff1660e01b815260040161275492919061498b565b60206040518083038186803b15801561276c57600080fd5b505af4158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a491906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff16633c3f825282856127ce9190614e72565b866040518363ffffffff1660e01b81526004016127ec929190614ca1565b600060405180830381600087803b15801561280657600080fd5b505af115801561281a573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16635817f0c68760600151836040518363ffffffff1660e01b815260040161285d929190614962565b600060405180830381600087803b15801561287757600080fd5b505af115801561288b573d6000803e3d6000fd5b5050505050612efc565b600060038111156128a9576128a8615039565b5b856020015160038111156128c0576128bf615039565b5b1415612b7e576000733FE070eC913099fcBd96c18524F873D7c3F95F4863ab41556f8673ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b15801561292757600080fd5b505afa15801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f9190614439565b60016002811061297257612971615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129bc57600080fd5b505afa1580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f491906145b4565b88600001518760066000612a086001610fda565b8152602001908152602001600020546040518563ffffffff1660e01b8152600401612a369493929190614d01565b60206040518083038186803b158015612a4e57600080fd5b505af4158015612a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8691906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff166375c66e2f60018389606001516040518463ffffffff1660e01b8152600401612aca939291906149eb565b600060405180830381600087803b158015612ae457600080fd5b505af1158015612af8573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16633c3f825284886000015187612b299190614de8565b6040518363ffffffff1660e01b8152600401612b46929190614ca1565b600060405180830381600087803b158015612b6057600080fd5b505af1158015612b74573d6000803e3d6000fd5b5050505050612efb565b60016003811115612b9257612b91615039565b5b85602001516003811115612ba957612ba8615039565b5b1415612efa576000733FE070eC913099fcBd96c18524F873D7c3F95F4863cda8198c733FE070eC913099fcBd96c18524F873D7c3F95F4863cff70001878a6000015160066000612bf96001610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b158015612c4d57600080fd5b505afa158015612c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c859190614439565b600160028110612c9857612c97615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ce257600080fd5b505afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a91906145b4565b612d249190614de8565b612d2e9190614de8565b6040518363ffffffff1660e01b8152600401612d4b929190614c78565b60206040518083038186803b158015612d6357600080fd5b505af4158015612d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9b9190614493565b88600001516040518363ffffffff1660e01b8152600401612dbd92919061498b565b60206040518083038186803b158015612dd557600080fd5b505af4158015612de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0d91906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff16633c3f8252848387612e389190614e72565b6040518363ffffffff1660e01b8152600401612e55929190614ca1565b600060405180830381600087803b158015612e6f57600080fd5b505af1158015612e83573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16635817f0c68760600151836040518363ffffffff1660e01b8152600401612ec6929190614962565b600060405180830381600087803b158015612ee057600080fd5b505af1158015612ef4573d6000803e3d6000fd5b50505050505b5b5b5b5050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612f32614199565b60056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115612fa357612fa2615039565b5b6003811115612fb557612fb4615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600260109054906101000a90046fffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61308f613b3b565b73ffffffffffffffffffffffffffffffffffffffff166130ad611ffe565b73ffffffffffffffffffffffffffffffffffffffff1614613103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130fa90614b42565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316a90614a82565b60405180910390fd5b61317c81613b43565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461320f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161320690614bc2565b60405180910390fd5b6000816fffffffffffffffffffffffffffffffff1611613264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161325b90614a22565b60405180910390fd5b80600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334990614b62565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156133c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133b990614a42565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342990614aa2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008290508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156134fd57600080fd5b505afa158015613511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353591906145b4565b6040518363ffffffff1660e01b8152600401613552929190614962565b602060405180830381600087803b15801561356c57600080fd5b505af1158015613580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a49190614466565b50505050565b60006135b98360200151610fda565b9050826000015160066000838152602001908152602001600020546135de9190614e72565b60066000838152602001908152602001600020819055508260200151600381111561360c5761360b615039565b5b8360000151836fffffffffffffffffffffffffffffffff167f2f2b9ec00f96da9afe52a06f4a0392b84a333e3718b29186681f51ddfe7c593b60405160405180910390a460056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549064ffffffffff02191690556001820160066101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050816fffffffffffffffffffffffffffffffff16600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16141561379e576001600260008282829054906101000a90046fffffffffffffffffffffffffffffffff1661375d9190614da2565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061379d6000613c07565b5b816fffffffffffffffffffffffffffffffff16600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614801561383157506fffffffffffffffffffffffffffffffff8016600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614155b156138a5576001600260108282829054906101000a90046fffffffffffffffffffffffffffffffff166138649190614e3e565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506138a46001613c07565b5b600260038111156138b9576138b8615039565b5b836020015160038111156138d0576138cf615039565b5b14806139045750600060038111156138eb576138ea615039565b5b8360200151600381111561390257613901615039565b5b145b156139a157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635817f0c63385600001516040518363ffffffff1660e01b815260040161396a929190614962565b600060405180830381600087803b15801561398457600080fd5b505af1158015613998573d6000803e3d6000fd5b50505050613b36565b6003808111156139b4576139b3615039565b5b836020015160038111156139cb576139ca615039565b5b1415613a6c57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375c66e2f60008560000151336040518463ffffffff1660e01b8152600401613a35939291906149b4565b600060405180830381600087803b158015613a4f57600080fd5b505af1158015613a63573d6000803e3d6000fd5b50505050613b35565b60016003811115613a8057613a7f615039565b5b83602001516003811115613a9757613a96615039565b5b1415613b3457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375c66e2f60018560000151336040518463ffffffff1660e01b8152600401613b01939291906149eb565b600060405180830381600087803b158015613b1b57600080fd5b505af1158015613b2f573d6000803e3d6000fd5b505050505b5b5b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006001811115613c1b57613c1a615039565b5b816001811115613c2e57613c2d615039565b5b1415613ecf576000600260009054906101000a90046fffffffffffffffffffffffffffffffff1690505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1611613dfb57600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115613d1457613d13615039565b5b6003811115613d2657613d25615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161415613df957600182613df19190614da2565b915050613c58565b505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115613e93576fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550613ecd565b80600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505b600180811115613ee257613ee1615039565b5b816001811115613ef557613ef4615039565b5b1415614196576000600260109054906101000a90046fffffffffffffffffffffffffffffffff1690505b600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff16106140c257600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115613fdb57613fda615039565b5b6003811115613fed57613fec615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614156140c0576001826140b89190614e3e565b915050613f1f565b505b600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff16101561415a576fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550614194565b80600260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505b50565b604051806080016040528060008152602001600060038111156141bf576141be615039565b5b8152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60006142036141fe84614d6b565b614d46565b9050808285602086028201111561421d5761421c6150d0565b5b60005b8581101561424d5781614233888261426c565b845260208401935060208301925050600181019050614220565b5050509392505050565b600081359050614266816153d5565b92915050565b60008151905061427b816153d5565b92915050565b600082601f830112614296576142956150c6565b5b60026142a38482856141f0565b91505092915050565b6000815190506142bb816153ec565b92915050565b6000815190506142d081615403565b92915050565b6000813590506142e58161541a565b92915050565b600060808284031215614301576143006150cb565b5b61430b6080614d46565b9050600061431b84828501614378565b600083015250602061432f848285016142d6565b6020830152506040614343848285016143b7565b604083015250606061435784828501614257565b60608301525092915050565b6000813590506143728161542a565b92915050565b60008135905061438781615441565b92915050565b60008151905061439c81615441565b92915050565b6000815190506143b181615458565b92915050565b6000813590506143c68161546f565b92915050565b6000602082840312156143e2576143e16150d5565b5b60006143f084828501614257565b91505092915050565b600080604083850312156144105761440f6150d5565b5b600061441e85828601614257565b925050602061442f85828601614257565b9150509250929050565b60006040828403121561444f5761444e6150d5565b5b600061445d84828501614281565b91505092915050565b60006020828403121561447c5761447b6150d5565b5b600061448a848285016142ac565b91505092915050565b6000602082840312156144a9576144a86150d5565b5b60006144b7848285016142c1565b91505092915050565b6000602082840312156144d6576144d56150d5565b5b60006144e4848285016142d6565b91505092915050565b60008060408385031215614504576145036150d5565b5b6000614512858286016142d6565b925050602061452385828601614378565b9150509250929050565b600060808284031215614543576145426150d5565b5b6000614551848285016142eb565b91505092915050565b6000602082840312156145705761456f6150d5565b5b600061457e84828501614363565b91505092915050565b60006020828403121561459d5761459c6150d5565b5b60006145ab84828501614378565b91505092915050565b6000602082840312156145ca576145c96150d5565b5b60006145d88482850161438d565b91505092915050565b6000602082840312156145f7576145f66150d5565b5b6000614605848285016143a2565b91505092915050565b61461781614ea6565b82525050565b61462681614ea6565b82525050565b61463581614ec4565b82525050565b61464481614f6a565b82525050565b61465381614f6a565b82525050565b61466281614f7c565b82525050565b61467181614f8e565b82525050565b6000614684601883614d91565b915061468f826150eb565b602082019050919050565b60006146a7602783614d91565b91506146b282615114565b604082019050919050565b60006146ca600c83614d91565b91506146d582615163565b602082019050919050565b60006146ed602683614d91565b91506146f88261518c565b604082019050919050565b6000614710602a83614d91565b915061471b826151db565b604082019050919050565b6000614733601783614d91565b915061473e8261522a565b602082019050919050565b6000614756601883614d91565b915061476182615253565b602082019050919050565b6000614779601383614d91565b91506147848261527c565b602082019050919050565b600061479c602983614d91565b91506147a7826152a5565b604082019050919050565b60006147bf602083614d91565b91506147ca826152f4565b602082019050919050565b60006147e2601583614d91565b91506147ed8261531d565b602082019050919050565b6000614805601c83614d91565b915061481082615346565b602082019050919050565b6000614828601c83614d91565b91506148338261536f565b602082019050919050565b600061484b601983614d91565b915061485682615398565b602082019050919050565b60808201600082015161487760008501826148c5565b50602082015161488a602085018261463b565b50604082015161489d60408501826148f2565b5060608201516148b0606085018261460e565b50505050565b6148bf81614f03565b82525050565b6148ce81614f3f565b82525050565b6148dd81614f3f565b82525050565b6148ec81614f3f565b82525050565b6148fb81614f59565b82525050565b61490a81614f59565b82525050565b6000602082019050614925600083018461461d565b92915050565b6000606082019050614940600083018661461d565b61494d602083018561461d565b61495a60408301846148d4565b949350505050565b6000604082019050614977600083018561461d565b61498460208301846148d4565b9392505050565b60006040820190506149a0600083018561462c565b6149ad60208301846148e3565b9392505050565b60006060820190506149c96000830186614659565b6149d660208301856148d4565b6149e3604083018461461d565b949350505050565b6000606082019050614a006000830186614668565b614a0d60208301856148d4565b614a1a604083018461461d565b949350505050565b60006020820190508181036000830152614a3b81614677565b9050919050565b60006020820190508181036000830152614a5b8161469a565b9050919050565b60006020820190508181036000830152614a7b816146bd565b9050919050565b60006020820190508181036000830152614a9b816146e0565b9050919050565b60006020820190508181036000830152614abb81614703565b9050919050565b60006020820190508181036000830152614adb81614726565b9050919050565b60006020820190508181036000830152614afb81614749565b9050919050565b60006020820190508181036000830152614b1b8161476c565b9050919050565b60006020820190508181036000830152614b3b8161478f565b9050919050565b60006020820190508181036000830152614b5b816147b2565b9050919050565b60006020820190508181036000830152614b7b816147d5565b9050919050565b60006020820190508181036000830152614b9b816147f8565b9050919050565b60006020820190508181036000830152614bbb8161481b565b9050919050565b60006020820190508181036000830152614bdb8161483e565b9050919050565b6000608082019050614bf76000830184614861565b92915050565b6000602082019050614c1260008301846148b6565b92915050565b6000602082019050614c2d60008301846148d4565b92915050565b6000608082019050614c4860008301876148d4565b614c55602083018661464a565b614c626040830185614901565b614c6f606083018461461d565b95945050505050565b6000604082019050614c8d60008301856148e3565b614c9a60208301846148e3565b9392505050565b6000604082019050614cb660008301856148d4565b614cc360208301846148d4565b9392505050565b6000606082019050614cdf60008301866148e3565b614cec60208301856148e3565b614cf960408301846148e3565b949350505050565b6000608082019050614d1660008301876148e3565b614d2360208301866148e3565b614d3060408301856148e3565b614d3d60608301846148e3565b95945050505050565b6000614d50614d61565b9050614d5c8282614fa0565b919050565b6000604051905090565b600067ffffffffffffffff821115614d8657614d85615097565b5b602082029050919050565b600082825260208201905092915050565b6000614dad82614f03565b9150614db883614f03565b9250826fffffffffffffffffffffffffffffffff03821115614ddd57614ddc61500a565b5b828201905092915050565b6000614df382614f3f565b9150614dfe83614f3f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614e3357614e3261500a565b5b828201905092915050565b6000614e4982614f03565b9150614e5483614f03565b925082821015614e6757614e6661500a565b5b828203905092915050565b6000614e7d82614f3f565b9150614e8883614f3f565b925082821015614e9b57614e9a61500a565b5b828203905092915050565b6000614eb182614f1f565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050614efe826153c1565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600064ffffffffff82169050919050565b6000614f7582614ef0565b9050919050565b6000614f8782614f3f565b9050919050565b6000614f9982614f3f565b9050919050565b614fa9826150da565b810181811067ffffffffffffffff82111715614fc857614fc7615097565b5b80604052505050565b6000614fdc82614f03565b91506fffffffffffffffffffffffffffffffff821415614fff57614ffe61500a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f436f6d6d6974207175657565206d757374206265203e20300000000000000000600082015250565b7f51756f746520746f6b656e20616464726573732063616e6e6f7420626520302060008201527f6164647265737300000000000000000000000000000000000000000000000000602082015250565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4c657665726167656420706f6f6c20616464726573732063616e6e6f7420626560008201527f2030206164647265737300000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206d757374206e6f74206265207a65726f000000000000000000600082015250565b7f416d6f756e74206c657373207468616e206d696e696d756d0000000000000000600082015250565b7f6d73672e73656e646572206e6f742073656c6600000000000000000000000000600082015250565b7f4d75737420756e636f6d6d6974206265666f72652066726f6e7452756e6e696e60008201527f67496e74657276616c0000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f436f6d6d697465723a206e6f7420666163746f72790000000000000000000000600082015250565b7f6d73672e73656e646572206e6f74206c6576657261676564506f6f6c00000000600082015250565b7f546f6f206d616e7920636f6d6d69747320696e20696e74657276616c00000000600082015250565b7f6d73672e73656e646572206e6f7420676f7665726e616e636500000000000000600082015250565b600481106153d2576153d1615039565b5b50565b6153de81614ea6565b81146153e957600080fd5b50565b6153f581614eb8565b811461540057600080fd5b50565b61540c81614ec4565b811461541757600080fd5b50565b6004811061542757600080fd5b50565b61543381614f03565b811461543e57600080fd5b50565b61544a81614f3f565b811461545557600080fd5b50565b61546181614f49565b811461546c57600080fd5b50565b61547881614f59565b811461548357600080fd5b5056fea264697066735822122035b6a43b29f31b39c1d1b02cdd766921302badf6e4cfbff9947b2e9b2e4f0dfa64736f6c63430008070033a264697066735822122081a947e6740055bcf08c1db6075a4024c5231d7ecec47a305accc5511a9b596a64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063960419831461003b578063c45a01551461006b575b600080fd5b610055600480360381019061005091906101c1565b610089565b6040516100629190610242565b60405180910390f35b61007361017a565b6040516100809190610242565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011190610294565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836040516101499061019e565b6101559392919061025d565b604051809103906000f080158015610171573d6000803e3d6000fd5b50905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61591f806200035983390190565b6000813590506101bb81610341565b92915050565b600080604083850312156101d8576101d7610313565b5b60006101e6858286016101ac565b92505060206101f7858286016101ac565b9150509250929050565b61020a816102c5565b82525050565b600061021d6016836102b4565b915061022882610318565b602082019050919050565b61023c816102d7565b82525050565b60006020820190506102576000830184610201565b92915050565b60006060820190506102726000830186610201565b61027f6020830185610233565b61028c6040830184610233565b949350505050565b600060208201905081810360008301526102ad81610210565b9050919050565b600082825260208201905092915050565b60006102d0826102f3565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f6d73672e73656e646572206e6f7420666163746f727900000000000000000000600082015250565b61034a816102d7565b811461035557600080fd5b5056fe60806040526fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503480156200005a57600080fd5b506040516200591f3803806200591f83398181016040528101906200008091906200036e565b620000a0620000946200024260201b60201c565b6200024a60201b60201c565b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620001be57600080fd5b505af1158015620001d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f991906200033c565b600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000453565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200031f816200041f565b92915050565b600081519050620003368162000439565b92915050565b6000602082840312156200035557620003546200041a565b5b600062000365848285016200030e565b91505092915050565b6000806000606084860312156200038a57620003896200041a565b5b60006200039a868287016200030e565b9350506020620003ad8682870162000325565b9250506040620003c08682870162000325565b9150509250925092565b6000620003d782620003fa565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200042a81620003ca565b81146200043657600080fd5b50565b6200044481620003de565b81146200045057600080fd5b50565b6154bc80620004636000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638bf13f82116100c3578063d44b1ff31161007c578063d44b1ff314610394578063e323aac6146103b2578063f2fde38b146103d0578063f9495c9c146103ec578063f9a0e14e14610408578063fd555fb91461042657610158565b80638bf13f82146102d05780638da5cb5b146102ee5780639eda0cc21461030c578063b3fecffe1461032a578063c45a015514610346578063caf4c2c51461036457610158565b80635aa6e675116101155780635aa6e67514610222578063605814fc1461024057806364d5366014610270578063685544a61461028e578063715018a6146102aa578063822255de146102b457610158565b80631c536da41461015d57806329075d711461016757806330f752601461019a57806341397577146101b85780634b2ec831146101e857806351b450f614610206575b600080fd5b610165610442565b005b610181600480360381019061017c919061455a565b610ae7565b6040516101919493929190614c33565b60405180910390f35b6101a2610b55565b6040516101af9190614bfd565b60405180910390f35b6101d260048036038101906101cd9190614587565b610b69565b6040516101df9190614c18565b60405180910390f35b6101f0610b81565b6040516101fd9190614bfd565b60405180910390f35b610220600480360381019061021b919061455a565b610ba3565b005b61022a610fb4565b6040516102379190614910565b60405180910390f35b61025a600480360381019061025591906144c0565b610fda565b6040516102679190614c18565b60405180910390f35b6102786110bc565b6040516102859190614bfd565b60405180910390f35b6102a860048036038101906102a3919061455a565b6110de565b005b6102b26111aa565b005b6102ce60048036038101906102c991906144ed565b611232565b005b6102d8611fdc565b6040516102e59190614bfd565b60405180910390f35b6102f6611ffe565b6040516103039190614910565b60405180910390f35b610314612027565b6040516103219190614bfd565b60405180910390f35b610344600480360381019061033f919061452d565b612049565b005b61034e612f04565b60405161035b9190614910565b60405180910390f35b61037e6004803603810190610379919061455a565b612f2a565b60405161038b9190614be2565b60405180910390f35b61039c61303f565b6040516103a99190614bfd565b60405180910390f35b6103ba613061565b6040516103c79190614910565b60405180910390f35b6103ea60048036038101906103e591906143cc565b613087565b005b6104066004803603810190610401919061455a565b61317f565b005b6104106132a0565b60405161041d9190614bfd565b60405180910390f35b610440600480360381019061043b91906143f9565b6132c2565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c990614b82565b60405180910390fd5b6fffffffffffffffffffffffffffffffff8016600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16141561052157610ae5565b6000600460106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105cb57600080fd5b505afa1580156105df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060391906145e1565b63ffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff16637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b15801561065357600080fd5b505afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b91906145b4565b90506000600260009054906101000a90046fffffffffffffffffffffffffffffffff1690505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1611610aa657600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff16600381111561076d5761076c615039565b5b600381111561077f5761077e615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050819550600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614156108555760018661084d9190614da2565b955050610a93565b83816040015164ffffffffff168461086d9190614e72565b116108785750610aa6565b7f53e7d7eb888194c67870ec86b8523606069fb6eeeab81f458a6065b9e88defa9826040516108a79190614bfd565b60405180910390a13073ffffffffffffffffffffffffffffffffffffffff1663b3fecffe826040518263ffffffff1660e01b81526004016108e89190614be2565b600060405180830381600087803b15801561090257600080fd5b505af1925050508015610913575060015b61095d5761092181836135aa565b7f089a8e68b5afa612f76f7ec1235a9d9d07e0d79462a6b0d862aaa0ac035426c1826040516109509190614bfd565b60405180910390a16109f3565b60056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549064ffffffffff02191690556001820160066101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161415610a91576fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050505050610ae5565b505b8080610a9e90614fd1565b9150506106b1565b5083600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050505b565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900464ffffffffff16908060010160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b6fffffffffffffffffffffffffffffffff81565b60066020528060005260406000206000915090505481565b600360109054906101000a90046fffffffffffffffffffffffffffffffff1681565b600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115610c1657610c15615039565b5b6003811115610c2857610c27615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16637de93f936040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5491906145b4565b905060008273ffffffffffffffffffffffffffffffffffffffff16637bfe789a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd691906145e1565b63ffffffff16905060008373ffffffffffffffffffffffffffffffffffffffff1663fd2c80ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2657600080fd5b505afa158015610e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5e91906145e1565b63ffffffff16905073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63aaa578b28483856040518463ffffffff1660e01b8152600401610ea193929190614cca565b60206040518083038186803b158015610eb957600080fd5b505af4158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190614466565b610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2790614b22565b60405180910390fd5b846060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9990614a62565b60405180910390fd5b610fac85876135aa565b505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806003811115610fef57610fee615039565b5b82600381111561100257611001615039565b5b141561101157600090506110b7565b6001600381111561102557611024615039565b5b82600381111561103857611037615039565b5b141561104757600190506110b7565b6002600381111561105b5761105a615039565b5b82600381111561106e5761106d615039565b5b141561107d57600290506110b7565b6003808111156110905761108f615039565b5b8260038111156110a3576110a2615039565b5b14156110b257600390506110b7565b600090505b919050565b600460009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116590614bc2565b60405180910390fd5b80600360106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6111b2613b3b565b73ffffffffffffffffffffffffffffffffffffffff166111d0611ffe565b73ffffffffffffffffffffffffffffffffffffffff1614611226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121d90614b42565b60405180910390fd5b6112306000613b43565b565b600460009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16600460109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16106112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cb90614ba2565b60405180910390fd5b6001600460108282829054906101000a90046fffffffffffffffffffffffffffffffff166113029190614da2565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000811161137b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137290614ac2565b60405180910390fd5b6000600360009054906101000a90046fffffffffffffffffffffffffffffffff1690506001816113ab9190614da2565b600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050604051806080016040528084815260200185600381111561142e5761142d615039565b5b81526020014264ffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525060056000846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908360038111156114c6576114c5615039565b5b021790555060408201518160010160016101000a81548164ffffffffff021916908364ffffffffff16021790555060608201518160010160066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600061154985610fda565b905083600660008381526020019081526020016000205461156a9190614de8565b60066000838152602001908152602001600020819055506fffffffffffffffffffffffffffffffff8016600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614156116055782600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b82600260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555084600381111561165157611650615039565b5b84846fffffffffffffffffffffffffffffffff167feeb519088468e5ea7765bbf8c4464c3bde5ff110d8de10ee5db057be2599d1fc60405160405180910390a460008273ffffffffffffffffffffffffffffffffffffffff1663ba8d54686040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d957600080fd5b505afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171191906145b4565b905060008373ffffffffffffffffffffffffffffffffffffffff16637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561175b57600080fd5b505afa15801561176f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179391906145b4565b9050600260038111156117a9576117a8615039565b5b8760038111156117bc576117bb615039565b5b14806117ec5750600060038111156117d7576117d6615039565b5b8760038111156117ea576117e9615039565b5b145b156118fa57600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16861015611864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185b90614ae2565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16637b0a0c9033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b81526004016118c39392919061492b565b600060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b50505050611fd3565b60038081111561190d5761190c615039565b5b8760038111156119205761191f615039565b5b1415611c6757600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cda8198c73__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cff70001858b6006600061196c6003610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156119c057600080fd5b505afa1580156119d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f89190614439565b600060028110611a0b57611a0a615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d91906145b4565b611a979190614de8565b611aa19190614de8565b6040518363ffffffff1660e01b8152600401611abe929190614c78565b60206040518083038186803b158015611ad657600080fd5b505af4158015611aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0e9190614493565b896040518363ffffffff1660e01b8152600401611b2c92919061498b565b60206040518083038186803b158015611b4457600080fd5b505af4158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c91906145b4565b9050600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16811015611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be890614ae2565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166387f9ca5d600089336040518463ffffffff1660e01b8152600401611c2f939291906149b4565b600060405180830381600087803b158015611c4957600080fd5b505af1158015611c5d573d6000803e3d6000fd5b5050505050611fd2565b60016003811115611c7b57611c7a615039565b5b876003811115611c8e57611c8d615039565b5b1415611fd157600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cda8198c73__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cff70001868b60066000611cda6001610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b158015611d2e57600080fd5b505afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190614439565b600160028110611d7957611d78615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc357600080fd5b505afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb91906145b4565b611e059190614de8565b611e0f9190614de8565b6040518363ffffffff1660e01b8152600401611e2c929190614c78565b60206040518083038186803b158015611e4457600080fd5b505af4158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c9190614493565b896040518363ffffffff1660e01b8152600401611e9a92919061498b565b60206040518083038186803b158015611eb257600080fd5b505af4158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea91906145b4565b9050600360109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16811015611f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5690614ae2565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166387f9ca5d600189336040518463ffffffff1660e01b8152600401611f9d939291906149eb565b600060405180830381600087803b158015611fb757600080fd5b505af1158015611fcb573d6000803e3d6000fd5b50505050505b5b5b50505050505050565b600460109054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a90046fffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ae90614b02565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ba8d54686040518163ffffffff1660e01b815260040160206040518083038186803b15801561212657600080fd5b505afa15801561213a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215e91906145b4565b905060008273ffffffffffffffffffffffffffffffffffffffff16637e71fc7d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121a857600080fd5b505afa1580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e091906145b4565b905060006121f18560200151610fda565b9050846000015160066000838152602001908152602001600020546122169190614e72565b60066000838152602001908152602001600020819055506002600381111561224157612240615039565b5b8560200151600381111561225857612257615039565b5b141561251657600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63ab41556f8673ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156122bf57600080fd5b505afa1580156122d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f79190614439565b60006002811061230a57612309615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561235457600080fd5b505afa158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238c91906145b4565b886000015186600660006123a06003610fda565b8152602001908152602001600020546040518563ffffffff1660e01b81526004016123ce9493929190614d01565b60206040518083038186803b1580156123e657600080fd5b505af41580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e91906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff166375c66e2f60008389606001516040518463ffffffff1660e01b8152600401612462939291906149b4565b600060405180830381600087803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16633c3f82528760000151856124c09190614de8565b866040518363ffffffff1660e01b81526004016124de929190614ca1565b600060405180830381600087803b1580156124f857600080fd5b505af115801561250c573d6000803e3d6000fd5b5050505050612efd565b60038081111561252957612528615039565b5b856020015160038111156125405761253f615039565b5b141561289557600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cda8198c73__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cff70001868a60000151600660006125906003610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156125e457600080fd5b505afa1580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190614439565b60006002811061262f5761262e615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561267957600080fd5b505afa15801561268d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b191906145b4565b6126bb9190614de8565b6126c59190614de8565b6040518363ffffffff1660e01b81526004016126e2929190614c78565b60206040518083038186803b1580156126fa57600080fd5b505af415801561270e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127329190614493565b88600001516040518363ffffffff1660e01b815260040161275492919061498b565b60206040518083038186803b15801561276c57600080fd5b505af4158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a491906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff16633c3f825282856127ce9190614e72565b866040518363ffffffff1660e01b81526004016127ec929190614ca1565b600060405180830381600087803b15801561280657600080fd5b505af115801561281a573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16635817f0c68760600151836040518363ffffffff1660e01b815260040161285d929190614962565b600060405180830381600087803b15801561287757600080fd5b505af115801561288b573d6000803e3d6000fd5b5050505050612efc565b600060038111156128a9576128a8615039565b5b856020015160038111156128c0576128bf615039565b5b1415612b7e57600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63ab41556f8673ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b15801561292757600080fd5b505afa15801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f9190614439565b60016002811061297257612971615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129bc57600080fd5b505afa1580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f491906145b4565b88600001518760066000612a086001610fda565b8152602001908152602001600020546040518563ffffffff1660e01b8152600401612a369493929190614d01565b60206040518083038186803b158015612a4e57600080fd5b505af4158015612a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8691906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff166375c66e2f60018389606001516040518463ffffffff1660e01b8152600401612aca939291906149eb565b600060405180830381600087803b158015612ae457600080fd5b505af1158015612af8573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16633c3f825284886000015187612b299190614de8565b6040518363ffffffff1660e01b8152600401612b46929190614ca1565b600060405180830381600087803b158015612b6057600080fd5b505af1158015612b74573d6000803e3d6000fd5b5050505050612efb565b60016003811115612b9257612b91615039565b5b85602001516003811115612ba957612ba8615039565b5b1415612efa57600073__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cda8198c73__$dc3b4b0a367edd91a2d74c73e2da54c142$__63cff70001878a6000015160066000612bf96001610fda565b8152602001908152602001600020548b73ffffffffffffffffffffffffffffffffffffffff16636d3e313e6040518163ffffffff1660e01b8152600401604080518083038186803b158015612c4d57600080fd5b505afa158015612c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c859190614439565b600160028110612c9857612c97615068565b5b602002015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ce257600080fd5b505afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a91906145b4565b612d249190614de8565b612d2e9190614de8565b6040518363ffffffff1660e01b8152600401612d4b929190614c78565b60206040518083038186803b158015612d6357600080fd5b505af4158015612d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9b9190614493565b88600001516040518363ffffffff1660e01b8152600401612dbd92919061498b565b60206040518083038186803b158015612dd557600080fd5b505af4158015612de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0d91906145b4565b90508473ffffffffffffffffffffffffffffffffffffffff16633c3f8252848387612e389190614e72565b6040518363ffffffff1660e01b8152600401612e55929190614ca1565b600060405180830381600087803b158015612e6f57600080fd5b505af1158015612e83573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16635817f0c68760600151836040518363ffffffff1660e01b8152600401612ec6929190614962565b600060405180830381600087803b158015612ee057600080fd5b505af1158015612ef4573d6000803e3d6000fd5b50505050505b5b5b5b5050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612f32614199565b60056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115612fa357612fa2615039565b5b6003811115612fb557612fb4615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600260109054906101000a90046fffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61308f613b3b565b73ffffffffffffffffffffffffffffffffffffffff166130ad611ffe565b73ffffffffffffffffffffffffffffffffffffffff1614613103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130fa90614b42565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316a90614a82565b60405180910390fd5b61317c81613b43565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461320f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161320690614bc2565b60405180910390fd5b6000816fffffffffffffffffffffffffffffffff1611613264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161325b90614a22565b60405180910390fd5b80600460006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334990614b62565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156133c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133b990614a42565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342990614aa2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008290508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156134fd57600080fd5b505afa158015613511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353591906145b4565b6040518363ffffffff1660e01b8152600401613552929190614962565b602060405180830381600087803b15801561356c57600080fd5b505af1158015613580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a49190614466565b50505050565b60006135b98360200151610fda565b9050826000015160066000838152602001908152602001600020546135de9190614e72565b60066000838152602001908152602001600020819055508260200151600381111561360c5761360b615039565b5b8360000151836fffffffffffffffffffffffffffffffff167f2f2b9ec00f96da9afe52a06f4a0392b84a333e3718b29186681f51ddfe7c593b60405160405180910390a460056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549064ffffffffff02191690556001820160066101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050816fffffffffffffffffffffffffffffffff16600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16141561379e576001600260008282829054906101000a90046fffffffffffffffffffffffffffffffff1661375d9190614da2565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061379d6000613c07565b5b816fffffffffffffffffffffffffffffffff16600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614801561383157506fffffffffffffffffffffffffffffffff8016600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614155b156138a5576001600260108282829054906101000a90046fffffffffffffffffffffffffffffffff166138649190614e3e565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506138a46001613c07565b5b600260038111156138b9576138b8615039565b5b836020015160038111156138d0576138cf615039565b5b14806139045750600060038111156138eb576138ea615039565b5b8360200151600381111561390257613901615039565b5b145b156139a157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635817f0c63385600001516040518363ffffffff1660e01b815260040161396a929190614962565b600060405180830381600087803b15801561398457600080fd5b505af1158015613998573d6000803e3d6000fd5b50505050613b36565b6003808111156139b4576139b3615039565b5b836020015160038111156139cb576139ca615039565b5b1415613a6c57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375c66e2f60008560000151336040518463ffffffff1660e01b8152600401613a35939291906149b4565b600060405180830381600087803b158015613a4f57600080fd5b505af1158015613a63573d6000803e3d6000fd5b50505050613b35565b60016003811115613a8057613a7f615039565b5b83602001516003811115613a9757613a96615039565b5b1415613b3457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375c66e2f60018560000151336040518463ffffffff1660e01b8152600401613b01939291906149eb565b600060405180830381600087803b158015613b1b57600080fd5b505af1158015613b2f573d6000803e3d6000fd5b505050505b5b5b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006001811115613c1b57613c1a615039565b5b816001811115613c2e57613c2d615039565b5b1415613ecf576000600260009054906101000a90046fffffffffffffffffffffffffffffffff1690505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1611613dfb57600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115613d1457613d13615039565b5b6003811115613d2657613d25615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161415613df957600182613df19190614da2565b915050613c58565b505b600260109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115613e93576fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550613ecd565b80600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505b600180811115613ee257613ee1615039565b5b816001811115613ef557613ef4615039565b5b1415614196576000600260109054906101000a90046fffffffffffffffffffffffffffffffff1690505b600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff16106140c257600060056000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900460ff166003811115613fdb57613fda615039565b5b6003811115613fed57613fec615039565b5b81526020016001820160019054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016001820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614156140c0576001826140b89190614e3e565b915050613f1f565b505b600260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff16101561415a576fffffffffffffffffffffffffffffffff600260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550614194565b80600260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505b50565b604051806080016040528060008152602001600060038111156141bf576141be615039565b5b8152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60006142036141fe84614d6b565b614d46565b9050808285602086028201111561421d5761421c6150d0565b5b60005b8581101561424d5781614233888261426c565b845260208401935060208301925050600181019050614220565b5050509392505050565b600081359050614266816153d5565b92915050565b60008151905061427b816153d5565b92915050565b600082601f830112614296576142956150c6565b5b60026142a38482856141f0565b91505092915050565b6000815190506142bb816153ec565b92915050565b6000815190506142d081615403565b92915050565b6000813590506142e58161541a565b92915050565b600060808284031215614301576143006150cb565b5b61430b6080614d46565b9050600061431b84828501614378565b600083015250602061432f848285016142d6565b6020830152506040614343848285016143b7565b604083015250606061435784828501614257565b60608301525092915050565b6000813590506143728161542a565b92915050565b60008135905061438781615441565b92915050565b60008151905061439c81615441565b92915050565b6000815190506143b181615458565b92915050565b6000813590506143c68161546f565b92915050565b6000602082840312156143e2576143e16150d5565b5b60006143f084828501614257565b91505092915050565b600080604083850312156144105761440f6150d5565b5b600061441e85828601614257565b925050602061442f85828601614257565b9150509250929050565b60006040828403121561444f5761444e6150d5565b5b600061445d84828501614281565b91505092915050565b60006020828403121561447c5761447b6150d5565b5b600061448a848285016142ac565b91505092915050565b6000602082840312156144a9576144a86150d5565b5b60006144b7848285016142c1565b91505092915050565b6000602082840312156144d6576144d56150d5565b5b60006144e4848285016142d6565b91505092915050565b60008060408385031215614504576145036150d5565b5b6000614512858286016142d6565b925050602061452385828601614378565b9150509250929050565b600060808284031215614543576145426150d5565b5b6000614551848285016142eb565b91505092915050565b6000602082840312156145705761456f6150d5565b5b600061457e84828501614363565b91505092915050565b60006020828403121561459d5761459c6150d5565b5b60006145ab84828501614378565b91505092915050565b6000602082840312156145ca576145c96150d5565b5b60006145d88482850161438d565b91505092915050565b6000602082840312156145f7576145f66150d5565b5b6000614605848285016143a2565b91505092915050565b61461781614ea6565b82525050565b61462681614ea6565b82525050565b61463581614ec4565b82525050565b61464481614f6a565b82525050565b61465381614f6a565b82525050565b61466281614f7c565b82525050565b61467181614f8e565b82525050565b6000614684601883614d91565b915061468f826150eb565b602082019050919050565b60006146a7602783614d91565b91506146b282615114565b604082019050919050565b60006146ca600c83614d91565b91506146d582615163565b602082019050919050565b60006146ed602683614d91565b91506146f88261518c565b604082019050919050565b6000614710602a83614d91565b915061471b826151db565b604082019050919050565b6000614733601783614d91565b915061473e8261522a565b602082019050919050565b6000614756601883614d91565b915061476182615253565b602082019050919050565b6000614779601383614d91565b91506147848261527c565b602082019050919050565b600061479c602983614d91565b91506147a7826152a5565b604082019050919050565b60006147bf602083614d91565b91506147ca826152f4565b602082019050919050565b60006147e2601583614d91565b91506147ed8261531d565b602082019050919050565b6000614805601c83614d91565b915061481082615346565b602082019050919050565b6000614828601c83614d91565b91506148338261536f565b602082019050919050565b600061484b601983614d91565b915061485682615398565b602082019050919050565b60808201600082015161487760008501826148c5565b50602082015161488a602085018261463b565b50604082015161489d60408501826148f2565b5060608201516148b0606085018261460e565b50505050565b6148bf81614f03565b82525050565b6148ce81614f3f565b82525050565b6148dd81614f3f565b82525050565b6148ec81614f3f565b82525050565b6148fb81614f59565b82525050565b61490a81614f59565b82525050565b6000602082019050614925600083018461461d565b92915050565b6000606082019050614940600083018661461d565b61494d602083018561461d565b61495a60408301846148d4565b949350505050565b6000604082019050614977600083018561461d565b61498460208301846148d4565b9392505050565b60006040820190506149a0600083018561462c565b6149ad60208301846148e3565b9392505050565b60006060820190506149c96000830186614659565b6149d660208301856148d4565b6149e3604083018461461d565b949350505050565b6000606082019050614a006000830186614668565b614a0d60208301856148d4565b614a1a604083018461461d565b949350505050565b60006020820190508181036000830152614a3b81614677565b9050919050565b60006020820190508181036000830152614a5b8161469a565b9050919050565b60006020820190508181036000830152614a7b816146bd565b9050919050565b60006020820190508181036000830152614a9b816146e0565b9050919050565b60006020820190508181036000830152614abb81614703565b9050919050565b60006020820190508181036000830152614adb81614726565b9050919050565b60006020820190508181036000830152614afb81614749565b9050919050565b60006020820190508181036000830152614b1b8161476c565b9050919050565b60006020820190508181036000830152614b3b8161478f565b9050919050565b60006020820190508181036000830152614b5b816147b2565b9050919050565b60006020820190508181036000830152614b7b816147d5565b9050919050565b60006020820190508181036000830152614b9b816147f8565b9050919050565b60006020820190508181036000830152614bbb8161481b565b9050919050565b60006020820190508181036000830152614bdb8161483e565b9050919050565b6000608082019050614bf76000830184614861565b92915050565b6000602082019050614c1260008301846148b6565b92915050565b6000602082019050614c2d60008301846148d4565b92915050565b6000608082019050614c4860008301876148d4565b614c55602083018661464a565b614c626040830185614901565b614c6f606083018461461d565b95945050505050565b6000604082019050614c8d60008301856148e3565b614c9a60208301846148e3565b9392505050565b6000604082019050614cb660008301856148d4565b614cc360208301846148d4565b9392505050565b6000606082019050614cdf60008301866148e3565b614cec60208301856148e3565b614cf960408301846148e3565b949350505050565b6000608082019050614d1660008301876148e3565b614d2360208301866148e3565b614d3060408301856148e3565b614d3d60608301846148e3565b95945050505050565b6000614d50614d61565b9050614d5c8282614fa0565b919050565b6000604051905090565b600067ffffffffffffffff821115614d8657614d85615097565b5b602082029050919050565b600082825260208201905092915050565b6000614dad82614f03565b9150614db883614f03565b9250826fffffffffffffffffffffffffffffffff03821115614ddd57614ddc61500a565b5b828201905092915050565b6000614df382614f3f565b9150614dfe83614f3f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614e3357614e3261500a565b5b828201905092915050565b6000614e4982614f03565b9150614e5483614f03565b925082821015614e6757614e6661500a565b5b828203905092915050565b6000614e7d82614f3f565b9150614e8883614f3f565b925082821015614e9b57614e9a61500a565b5b828203905092915050565b6000614eb182614f1f565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050614efe826153c1565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600064ffffffffff82169050919050565b6000614f7582614ef0565b9050919050565b6000614f8782614f3f565b9050919050565b6000614f9982614f3f565b9050919050565b614fa9826150da565b810181811067ffffffffffffffff82111715614fc857614fc7615097565b5b80604052505050565b6000614fdc82614f03565b91506fffffffffffffffffffffffffffffffff821415614fff57614ffe61500a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f436f6d6d6974207175657565206d757374206265203e20300000000000000000600082015250565b7f51756f746520746f6b656e20616464726573732063616e6e6f7420626520302060008201527f6164647265737300000000000000000000000000000000000000000000000000602082015250565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4c657665726167656420706f6f6c20616464726573732063616e6e6f7420626560008201527f2030206164647265737300000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206d757374206e6f74206265207a65726f000000000000000000600082015250565b7f416d6f756e74206c657373207468616e206d696e696d756d0000000000000000600082015250565b7f6d73672e73656e646572206e6f742073656c6600000000000000000000000000600082015250565b7f4d75737420756e636f6d6d6974206265666f72652066726f6e7452756e6e696e60008201527f67496e74657276616c0000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f436f6d6d697465723a206e6f7420666163746f72790000000000000000000000600082015250565b7f6d73672e73656e646572206e6f74206c6576657261676564506f6f6c00000000600082015250565b7f546f6f206d616e7920636f6d6d69747320696e20696e74657276616c00000000600082015250565b7f6d73672e73656e646572206e6f7420676f7665726e616e636500000000000000600082015250565b600481106153d2576153d1615039565b5b50565b6153de81614ea6565b81146153e957600080fd5b50565b6153f581614eb8565b811461540057600080fd5b50565b61540c81614ec4565b811461541757600080fd5b50565b6004811061542757600080fd5b50565b61543381614f03565b811461543e57600080fd5b50565b61544a81614f3f565b811461545557600080fd5b50565b61546181614f49565b811461546c57600080fd5b50565b61547881614f59565b811461548357600080fd5b5056fea264697066735822122035b6a43b29f31b39c1d1b02cdd766921302badf6e4cfbff9947b2e9b2e4f0dfa64736f6c63430008070033a264697066735822122081a947e6740055bcf08c1db6075a4024c5231d7ecec47a305accc5511a9b596a64736f6c63430008070033",
  "libraries": {
    "PoolSwapLibrary": "0x3FE070eC913099fcBd96c18524F873D7c3F95F48"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "The deployer of the PoolCommitter contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9036,
        "contract": "contracts/implementation/PoolCommitterDeployer.sol:PoolCommitterDeployer",
        "label": "factory",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}